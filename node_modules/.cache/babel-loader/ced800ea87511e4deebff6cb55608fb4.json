{"ast":null,"code":"import { useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { setUserAddress } from \"../actions\";\n\nconst useUserSigner = injectedProvider => {\n  const [signer, setSigner] = useState();\n  const DEBUG = useSelector(state => state.debug.debug);\n  const dispatch = useDispatch();\n  useMemo(async () => {\n    if (injectedProvider) {\n      DEBUG && console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n\n      try {\n        dispatch(setUserAddress(await injectedSigner.getAddress()));\n      } catch (e) {\n        DEBUG && console.log(\"🦊 Error getting injected provider address\", e);\n        toast.error(\"No wallet connected!\", {\n          className: \"error\",\n          toastId: \"no-address\"\n        });\n        dispatch(setUserAddress(undefined));\n      }\n    } else setSigner();\n  }, [injectedProvider]);\n  return signer;\n};\n\nexport default useUserSigner;","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/hooks/UserSigner.js"],"names":["useMemo","useState","useDispatch","useSelector","toast","setUserAddress","useUserSigner","injectedProvider","signer","setSigner","DEBUG","state","debug","dispatch","console","log","injectedSigner","_isProvider","getSigner","getAddress","e","error","className","toastId","undefined"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,MAAMC,aAAa,GAAGC,gBAAgB,IAAI;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,EAApC;AACA,QAAMS,KAAK,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYA,KAAtB,CAAzB;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEAF,EAAAA,OAAO,CAAC,YAAY;AAClB,QAAIO,gBAAJ,EAAsB;AACpBG,MAAAA,KAAK,IAAII,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAAT;AACA,YAAMC,cAAc,GAAGT,gBAAgB,CAACU,WAAjB,GAA+BV,gBAAgB,CAACW,SAAjB,EAA/B,GAA8DX,gBAArF;AACAE,MAAAA,SAAS,CAACO,cAAD,CAAT;;AACA,UAAI;AACFH,QAAAA,QAAQ,CAACR,cAAc,CAAC,MAAMW,cAAc,CAACG,UAAf,EAAP,CAAf,CAAR;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACVV,QAAAA,KAAK,IAAII,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DK,CAA1D,CAAT;AACAhB,QAAAA,KAAK,CAACiB,KAAN,CAAY,sBAAZ,EAAoC;AAClCC,UAAAA,SAAS,EAAE,OADuB;AAElCC,UAAAA,OAAO,EAAE;AAFyB,SAApC;AAIAV,QAAAA,QAAQ,CAACR,cAAc,CAACmB,SAAD,CAAf,CAAR;AACD;AACF,KAdD,MAcOf,SAAS;AACjB,GAhBM,EAgBJ,CAACF,gBAAD,CAhBI,CAAP;AAkBA,SAAOC,MAAP;AACD,CAxBD;;AA0BA,eAAeF,aAAf","sourcesContent":["import { useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { setUserAddress } from \"../actions\";\n\nconst useUserSigner = injectedProvider => {\n  const [signer, setSigner] = useState();\n  const DEBUG = useSelector(state => state.debug.debug);\n  const dispatch = useDispatch();\n\n  useMemo(async () => {\n    if (injectedProvider) {\n      DEBUG && console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n      try {\n        dispatch(setUserAddress(await injectedSigner.getAddress()));\n      } catch (e) {\n        DEBUG && console.log(\"🦊 Error getting injected provider address\", e);\n        toast.error(\"No wallet connected!\", {\n          className: \"error\",\n          toastId: \"no-address\",\n        });\n        dispatch(setUserAddress(undefined));\n      }\n    } else setSigner();\n  }, [injectedProvider]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n"]},"metadata":{},"sourceType":"module"}