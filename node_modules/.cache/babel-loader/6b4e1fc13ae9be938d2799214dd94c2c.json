{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Buffer>|Iterable<Buffer>} stream\n * @returns {Promise<Buffer>}\n */\n\n\nfunction toBuffer(_x) {\n  return _toBuffer.apply(this, arguments);\n}\n\nfunction _toBuffer() {\n  _toBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream) {\n    var buffer, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            buffer = Buffer.alloc(0);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(stream);\n\n          case 5:\n            _context.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 18;\n              break;\n            }\n\n            buf = _value;\n            buffer = Buffer.concat([buffer, buf], buffer.length + buf.length);\n\n          case 15:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 18:\n            _context.next = 24;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 24:\n            _context.prev = 24;\n            _context.prev = 25;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 29;\n            return _iterator.return();\n\n          case 29:\n            _context.prev = 29;\n\n            if (!_didIteratorError) {\n              _context.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context.finish(29);\n\n          case 33:\n            return _context.finish(24);\n\n          case 34:\n            return _context.abrupt(\"return\", buffer);\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _toBuffer.apply(this, arguments);\n}\n\nmodule.exports = toBuffer;","map":null,"metadata":{},"sourceType":"script"}