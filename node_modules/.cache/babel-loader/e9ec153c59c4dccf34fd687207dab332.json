{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport { useState, useEffect, useCallback } from \"react\";\nexport default function useEventListener(contract, eventName, provider, startBlock) {\n  var _a = __read(useState([]), 2),\n      updates = _a[0],\n      setUpdates = _a[1];\n\n  var addNewEvent = useCallback(function () {\n    var eventArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      eventArgs[_i] = arguments[_i];\n    }\n\n    return setUpdates(function (messages) {\n      return __spread(messages, [eventArgs.pop().args]);\n    });\n  }, []); // eslint-disable-next-line consistent-return\n\n  useEffect(function () {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if (contract) {\n      try {\n        contract.on(eventName, addNewEvent);\n        return function () {\n          contract.off(eventName, addNewEvent);\n        };\n      } catch (e) {\n        // Event \"eventName\" may not exist on contract\n        // eslint-disable-next-line no-console\n        console.log(e);\n      }\n    }\n  }, [provider, contract, eventName, startBlock, addNewEvent]);\n  return updates;\n}","map":null,"metadata":{},"sourceType":"module"}