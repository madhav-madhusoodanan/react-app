{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  plots: [],\n  parcel: {\n    id: 0,\n    parcel: -1,\n    sold: false,\n    owner: \"\",\n    metadata: {\n      geojson: {}\n    }\n  },\n  communal: [],\n  highlightedPlot: undefined,\n  activePlot: undefined,\n  fetching: true\n};\nexport const plotsState = createSlice({\n  name: \"plots\",\n  initialState,\n  reducers: {\n    setPlots: (state, action) => {\n      state.plots = action.payload;\n    },\n    setHighlightedPlot: (state, action) => {\n      if (!state.activePlot) {\n        state.highlightedPlot = action.payload;\n      }\n    },\n    setActivePlot: (state, action) => {\n      state.activePlot = action.payload;\n      state.highlightedPlot = action.payload;\n    },\n    setIdFilter: (state, action) => {\n      state.idFilter = action.payload;\n    },\n    fetchedPlots: state => {\n      state.fetching = false;\n    },\n    setParcelGeojson: (state, action) => {\n      state.parcel.metadata.geojson = action.payload;\n    },\n    setCommunalLand: (state, action) => {\n      state.communal = action.payload;\n    }\n  }\n});\nexport const {\n  setPlots,\n  setHighlightedPlot,\n  setActivePlot,\n  setIdFilter,\n  fetchedPlots,\n  setParcelGeojson,\n  setCommunalLand\n} = plotsState.actions;\nexport default plotsState.reducer;","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/actions/plotsSlice.ts"],"names":["createSlice","initialState","plots","parcel","id","sold","owner","metadata","geojson","communal","highlightedPlot","undefined","activePlot","fetching","plotsState","name","reducers","setPlots","state","action","payload","setHighlightedPlot","setActivePlot","setIdFilter","idFilter","fetchedPlots","setParcelGeojson","setCommunalLand","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAaA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,EAAE,EAAE,CADE;AAEND,IAAAA,MAAM,EAAE,CAAC,CAFH;AAGNE,IAAAA,IAAI,EAAE,KAHA;AAINC,IAAAA,KAAK,EAAE,EAJD;AAKNC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AALJ,GAFuB;AAS/BC,EAAAA,QAAQ,EAAE,EATqB;AAU/BC,EAAAA,eAAe,EAAEC,SAVc;AAW/BC,EAAAA,UAAU,EAAED,SAXmB;AAY/BE,EAAAA,QAAQ,EAAE;AAZqB,CAAjC;AAeA,OAAO,MAAMC,UAAU,GAAGd,WAAW,CAAC;AACpCe,EAAAA,IAAI,EAAE,OAD8B;AAEpCd,EAAAA,YAFoC;AAGpCe,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAClDD,MAAAA,KAAK,CAAChB,KAAN,GAAciB,MAAM,CAACC,OAArB;AACD,KAHO;AAIRC,IAAAA,kBAAkB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAoD;AACtE,UAAI,CAACD,KAAK,CAACN,UAAX,EAAuB;AACrBM,QAAAA,KAAK,CAACR,eAAN,GAAwBS,MAAM,CAACC,OAA/B;AACD;AACF,KARO;AASRE,IAAAA,aAAa,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAoD;AACjED,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACC,OAA1B;AACAF,MAAAA,KAAK,CAACR,eAAN,GAAwBS,MAAM,CAACC,OAA/B;AACD,KAZO;AAaRG,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAsD;AACjED,MAAAA,KAAK,CAACM,QAAN,GAAiBL,MAAM,CAACC,OAAxB;AACD,KAfO;AAgBRK,IAAAA,YAAY,EAAEP,KAAK,IAAI;AACrBA,MAAAA,KAAK,CAACL,QAAN,GAAiB,KAAjB;AACD,KAlBO;AAmBRa,IAAAA,gBAAgB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAuC;AACvDD,MAAAA,KAAK,CAACf,MAAN,CAAaI,QAAb,CAAsBC,OAAtB,GAAgCW,MAAM,CAACC,OAAvC;AACD,KArBO;AAsBRO,IAAAA,eAAe,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAyC;AACxDD,MAAAA,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACC,OAAxB;AACD;AAxBO;AAH0B,CAAD,CAA9B;AA+BP,OAAO,MAAM;AACXH,EAAAA,QADW;AAEXI,EAAAA,kBAFW;AAGXC,EAAAA,aAHW;AAIXC,EAAAA,WAJW;AAKXE,EAAAA,YALW;AAMXC,EAAAA,gBANW;AAOXC,EAAAA;AAPW,IAQTb,UAAU,CAACc,OARR;AAUP,eAAed,UAAU,CAACe,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plot } from \"../models/Plot\";\n\ninterface PlotsState {\n  plots: Plot[];\n  parcel: Plot;\n  communal: any[];\n  highlightedPlot?: Plot;\n  activePlot?: Plot;\n  idFilter?: string;\n  fetching: boolean;\n}\n\nconst initialState: PlotsState = {\n  plots: [],\n  parcel: {\n    id: 0,\n    parcel: -1,\n    sold: false,\n    owner: \"\",\n    metadata: { geojson: {} },\n  },\n  communal: [],\n  highlightedPlot: undefined,\n  activePlot: undefined,\n  fetching: true,\n};\n\nexport const plotsState = createSlice({\n  name: \"plots\",\n  initialState,\n  reducers: {\n    setPlots: (state, action: PayloadAction<Plot[]>) => {\n      state.plots = action.payload;\n    },\n    setHighlightedPlot: (state, action: PayloadAction<Plot | undefined>) => {\n      if (!state.activePlot) {\n        state.highlightedPlot = action.payload;\n      }\n    },\n    setActivePlot: (state, action: PayloadAction<Plot | undefined>) => {\n      state.activePlot = action.payload;\n      state.highlightedPlot = action.payload;\n    },\n    setIdFilter: (state, action: PayloadAction<string | undefined>) => {\n      state.idFilter = action.payload;\n    },\n    fetchedPlots: state => {\n      state.fetching = false;\n    },\n    setParcelGeojson: (state, action: PayloadAction<any>) => {\n      state.parcel.metadata.geojson = action.payload;\n    },\n    setCommunalLand: (state, action: PayloadAction<any[]>) => {\n      state.communal = action.payload;\n    },\n  },\n});\n\nexport const {\n  setPlots,\n  setHighlightedPlot,\n  setActivePlot,\n  setIdFilter,\n  fetchedPlots,\n  setParcelGeojson,\n  setCommunalLand,\n} = plotsState.actions;\n\nexport default plotsState.reducer;\n"]},"metadata":{},"sourceType":"module"}