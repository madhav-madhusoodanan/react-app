{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState, useEffect } from \"react\";\nimport BurnerProvider from \"burner-provider\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { isAddress } from \"@ethersproject/address\";\nimport useUserAddress from \"./UserAddress\";\n\nvar useUserProvider = function useUserProvider(provider) {\n  var _a = __read(useState(provider), 2),\n      injectedProvider = _a[0],\n      setInjectedProvider = _a[1];\n\n  var userAddress = useUserAddress(provider);\n  useEffect(function () {\n    // If provider is read-only, generate a burner wallet.\n    setInjectedProvider(isAddress(userAddress) ? provider : new Web3Provider(new BurnerProvider(provider.connection.url)));\n  }, [userAddress, provider]);\n  return injectedProvider;\n};\n\nexport default useUserProvider;","map":null,"metadata":{},"sourceType":"module"}