{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\n\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nvar ObservableStore = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(ObservableStore, _safe_event_emitter_);\n\n  var _super = _createSuper(ObservableStore);\n\n  function ObservableStore(initState) {\n    var _this;\n\n    _classCallCheck(this, ObservableStore);\n\n    _this = _super.call(this);\n\n    if (initState) {\n      _this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      _this._state = {};\n    }\n\n    return _this;\n  } // wrapper around internal getState\n\n\n  _createClass(ObservableStore, [{\n    key: \"getState\",\n    value: function getState() {\n      return this._getState();\n    } // wrapper around internal putState\n\n  }, {\n    key: \"putState\",\n    value: function putState(newState) {\n      this._putState(newState);\n\n      this.emit('update', newState);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(partialState) {\n      // if non-null object, merge\n      if (partialState && typeof partialState === 'object') {\n        var state = this.getState();\n        this.putState(Object.assign(Object.assign({}, state), partialState)); // if not object, use new value\n      } else {\n        this.putState(partialState);\n      }\n    } // subscribe to changes\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(handler) {\n      this.on('update', handler);\n    } // unsubscribe to changes\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(handler) {\n      this.removeListener('update', handler);\n    } //\n    // private\n    //\n    // read from persistence\n\n  }, {\n    key: \"_getState\",\n    value: function _getState() {\n      return this._state;\n    } // write to persistence\n\n  }, {\n    key: \"_putState\",\n    value: function _putState(newState) {\n      this._state = newState;\n    }\n  }]);\n\n  return ObservableStore;\n}(safe_event_emitter_1.default);\n\nexports.ObservableStore = ObservableStore;","map":null,"metadata":{},"sourceType":"script"}