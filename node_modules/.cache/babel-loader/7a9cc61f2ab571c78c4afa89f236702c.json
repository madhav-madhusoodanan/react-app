{"ast":null,"code":"import _regeneratorRuntime from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{notification}from\"antd\";import Notify from\"bnc-notify\";import{BLOCKNATIVE_DAPPID}from\"../constants\";var _require=require(\"ethers\"),ethers=_require.ethers;// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nvar callbacks={};var DEBUG=true;export default function Transactor(providerOrSigner,gasPrice,etherscan){if(typeof providerOrSigner!==\"undefined\"){// eslint-disable-next-line consistent-return\nreturn/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tx,callback){var signer,network,provider,options,notify,etherscanNetwork,etherscanTxUrl,result,_notify$hash,emitter,txResult,listeningInterval;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(ethers.Signer.isSigner(providerOrSigner)===true)){_context2.next=11;break;}provider=providerOrSigner.provider;signer=providerOrSigner;_context2.t0=providerOrSigner.provider;if(!_context2.t0){_context2.next=8;break;}_context2.next=7;return providerOrSigner.provider.getNetwork();case 7:_context2.t0=_context2.sent;case 8:network=_context2.t0;_context2.next=17;break;case 11:if(!providerOrSigner._isProvider){_context2.next=17;break;}provider=providerOrSigner;signer=providerOrSigner.getSigner();_context2.next=16;return providerOrSigner.getNetwork();case 16:network=_context2.sent;case 17:console.log(\"network\",network);options=null;notify=null;if(navigator.onLine){options={dappId:BLOCKNATIVE_DAPPID,// GET YOUR OWN KEY AT https://account.blocknative.com\nsystem:\"ethereum\",networkId:network.chainId,// darkMode: Boolean, // (default: false)\ntransactionHandler:function transactionHandler(txInformation){if(DEBUG)console.log(\"HANDLE TX\",txInformation);var possibleFunction=callbacks[txInformation.transaction.hash];if(typeof possibleFunction===\"function\"){possibleFunction(txInformation.transaction);}}};notify=Notify(options);}etherscanNetwork=\"\";if(network.name&&network.chainId>1){etherscanNetwork=network.name+\".\";}etherscanTxUrl=\"https://\"+etherscanNetwork+\"etherscan.io/tx/\";if(network.chainId===100){etherscanTxUrl=\"https://blockscout.com/poa/xdai/tx/\";}_context2.prev=25;if(!(tx instanceof Promise)){_context2.next=33;break;}if(DEBUG)console.log(\"AWAITING TX\",tx);_context2.next=30;return tx;case 30:result=_context2.sent;_context2.next=39;break;case 33:if(!tx.gasPrice){tx.gasPrice=gasPrice||ethers.utils.parseUnits(\"4.1\",\"gwei\");}if(!tx.gasLimit){tx.gasLimit=ethers.utils.hexlify(120000);}if(DEBUG)console.log(\"RUNNING TX\",tx);_context2.next=38;return signer.sendTransaction(tx);case 38:result=_context2.sent;case 39:if(DEBUG)console.log(\"RESULT:\",result);// console.log(\"Notify\", notify);\nif(callback){callbacks[result.hash]=callback;}// if it is a valid Notify.js network, use that, if not, just send a default notification\nif(!(notify&&[1,3,4,5,42,100].indexOf(network.chainId)>=0)){_context2.next=46;break;}_notify$hash=notify.hash(result.hash),emitter=_notify$hash.emitter;emitter.on(\"all\",function(transaction){return{onclick:function onclick(){return window.open((etherscan||etherscanTxUrl)+transaction.hash);}};});_context2.next=52;break;case 46:notification.info({message:\"Local Transaction Sent\",description:result.hash,placement:\"bottomRight\"});// on most networks BlockNative will update a transaction handler,\n// but locally we will set an interval to listen...\nif(!callback){_context2.next=52;break;}_context2.next=50;return tx;case 50:txResult=_context2.sent;listeningInterval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var currentTransactionReceipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"CHECK IN ON THE TX\",txResult,provider);_context.next=3;return provider.getTransactionReceipt(txResult.hash);case 3:currentTransactionReceipt=_context.sent;if(currentTransactionReceipt&&currentTransactionReceipt.confirmations){callback(_objectSpread(_objectSpread({},txResult),currentTransactionReceipt));clearInterval(listeningInterval);}case 5:case\"end\":return _context.stop();}}},_callee);})),500);case 52:if(!(typeof result.wait===\"function\")){_context2.next=55;break;}_context2.next=55;return result.wait();case 55:return _context2.abrupt(\"return\",result);case 58:_context2.prev=58;_context2.t1=_context2[\"catch\"](25);console.log(_context2.t1);console.log(\"Transaction Error:\",_context2.t1.message);notification.error({message:\"Transaction Error\",description:_context2.t1.data?_context2.t1.data.message:_context2.t1.reason?_context2.t1.reason:_context2.t1.message});if(callback&&typeof callback===\"function\"){callback(_context2.t1);}case 64:case\"end\":return _context2.stop();}}},_callee2,null,[[25,58]]);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();}}","map":null,"metadata":{},"sourceType":"module"}