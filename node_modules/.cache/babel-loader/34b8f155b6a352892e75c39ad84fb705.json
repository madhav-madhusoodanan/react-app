{"ast":null,"code":"var _jsxFileName = \"/home/madhav/Documents/freelancers/app/packages/react-app/src/components/PlotMap.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport loading from \"../assets/images/loading.gif\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { useAppSelector } from \"../hooks\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nexport default function PlotMap({\n  parcel,\n  plots,\n  startingCoordinates,\n  startingZoom,\n  startingPitch\n}) {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const highlightedPlot = useAppSelector(state => state.plots.highlightedPlot);\n  const activePlot = useAppSelector(state => state.plots.activePlot);\n  const communal = useAppSelector(state => state.plots.communal); // zoom to plot on selection\n\n  useEffect(() => {\n    if (map.current && activePlot) {\n      map.current.flyTo({\n        center: activePlot.metadata.geojson.geometry.coordinates[0][0],\n        zoom: startingZoom,\n        pitch: startingPitch\n      });\n    }\n  }, [activePlot]);\n\n  const addOutlineToMap = (geojson, string_id, color = \"#eff551\") => {\n    if (map === null || map === void 0 ? void 0 : map.current) {\n      if (!map.current.getSource(string_id)) {\n        map.current.addSource(string_id, {\n          type: \"geojson\",\n          data: geojson\n        });\n      } // add plot outline\n\n\n      map.current.addLayer({\n        id: `${string_id}_outline`,\n        source: string_id,\n        type: \"line\",\n        paint: {\n          \"line-color\": color,\n          \"line-width\": 2\n        }\n      });\n    }\n  };\n\n  const addFilledToMap = (geojson, string_id, opacity = 0.5, color = \"#eff551\") => {\n    if (map === null || map === void 0 ? void 0 : map.current) {\n      if (!map.current.getSource(string_id)) {\n        map.current.addSource(string_id, {\n          type: \"geojson\",\n          data: geojson\n        });\n      } // add plot outline\n\n\n      map.current.addLayer({\n        id: `${string_id}_fill`,\n        source: string_id,\n        type: \"fill\",\n        paint: {\n          \"fill-color\": color,\n          \"fill-opacity\": opacity\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    var _mapContainer$current;\n\n    if (map.current) return; // only render map once\n\n    map.current = new mapboxgl.Map({\n      container: (_mapContainer$current = mapContainer.current) !== null && _mapContainer$current !== void 0 ? _mapContainer$current : \"\",\n      // should never need the fallback\n      style: \"mapbox://styles/gregrolwes/ckvsro22d1bj514oy7iy900av\",\n      center: startingCoordinates,\n      zoom: startingZoom,\n      pitch: startingPitch\n    });\n  }, []); // Draw parcel outline and communal land\n\n  useEffect(() => {\n    if (map === null || map === void 0 ? void 0 : map.current) {\n      map.current.on(\"load\", function () {\n        if (map.current && map.current.getSource(\"parcel\")) return; // skip if already added\n\n        addOutlineToMap(parcel.metadata.geojson, \"parcel\");\n        communal.forEach((plot, idx) => {\n          addFilledToMap(plot, idx.toString(), 1, \"#06be7f\");\n        });\n        setTimeout(() => {\n          setMapLoaded(true);\n        }, 1000);\n      });\n    }\n  }, [map.current, plots]); // Add/remove plot highlight when highlighted plot changes\n\n  useEffect(() => {\n    if ((map === null || map === void 0 ? void 0 : map.current) && highlightedPlot && !map.current.getLayer(\"highlighted_fill\") && mapLoaded) {\n      addOutlineToMap(highlightedPlot.metadata.geojson, \"highlighted\", \"#fff\");\n      addFilledToMap(highlightedPlot.metadata.geojson, \"highlighted\");\n    } else if ((map === null || map === void 0 ? void 0 : map.current) && map.current.getLayer(\"highlighted_fill\") && mapLoaded) {\n      map.current.removeLayer(\"highlighted_fill\");\n      map.current.removeLayer(\"highlighted_outline\");\n      map.current.removeSource(\"highlighted\");\n    }\n  }, [highlightedPlot, map.current]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot-map flex-grow flex flex-col relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, !mapLoaded && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 39\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapContainer,\n    className: \"absolute left-0 right-0 top-0 bottom-0 plot-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Loading() {\n  return /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      opacity: 1\n    },\n    exit: {\n      opacity: 0\n    },\n    className: \"plot-map bg-black absolute left-0 right-0 top-0 bottom-0 z-10 flex items-center justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: loading,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/components/PlotMap.jsx"],"names":["React","useRef","useEffect","useState","mapboxgl","loading","useAppSelector","AnimatePresence","motion","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","PlotMap","parcel","plots","startingCoordinates","startingZoom","startingPitch","mapContainer","map","mapLoaded","setMapLoaded","highlightedPlot","state","activePlot","communal","current","flyTo","center","metadata","geojson","geometry","coordinates","zoom","pitch","addOutlineToMap","string_id","color","getSource","addSource","type","data","addLayer","id","source","paint","addFilledToMap","opacity","Map","container","style","on","forEach","plot","idx","toString","setTimeout","getLayer","removeLayer","removeSource","Loading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAAmC;;AACnC,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAO,8BAAP;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,eAAxC;AAEAJ,QAAQ,CAACK,WAAT,GAAuBC,OAAO,CAACC,GAAR,CAAYC,sBAAnC;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA,mBAAjB;AAAsCC,EAAAA,YAAtC;AAAoDC,EAAAA;AAApD,CAAjB,EAAsF;AACnG,QAAMC,YAAY,GAAGlB,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMmB,GAAG,GAAGnB,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMoB,eAAe,GAAGjB,cAAc,CAACkB,KAAK,IAAIA,KAAK,CAACT,KAAN,CAAYQ,eAAtB,CAAtC;AACA,QAAME,UAAU,GAAGnB,cAAc,CAACkB,KAAK,IAAIA,KAAK,CAACT,KAAN,CAAYU,UAAtB,CAAjC;AACA,QAAMC,QAAQ,GAAGpB,cAAc,CAACkB,KAAK,IAAIA,KAAK,CAACT,KAAN,CAAYW,QAAtB,CAA/B,CAPmG,CASnG;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,GAAG,CAACO,OAAJ,IAAeF,UAAnB,EAA+B;AAC7BL,MAAAA,GAAG,CAACO,OAAJ,CAAYC,KAAZ,CAAkB;AAChBC,QAAAA,MAAM,EAAEJ,UAAU,CAACK,QAAX,CAAoBC,OAApB,CAA4BC,QAA5B,CAAqCC,WAArC,CAAiD,CAAjD,EAAoD,CAApD,CADQ;AAEhBC,QAAAA,IAAI,EAAEjB,YAFU;AAGhBkB,QAAAA,KAAK,EAAEjB;AAHS,OAAlB;AAKD;AACF,GARQ,EAQN,CAACO,UAAD,CARM,CAAT;;AAUA,QAAMW,eAAe,GAAG,CAACL,OAAD,EAAUM,SAAV,EAAqBC,KAAK,GAAG,SAA7B,KAA2C;AACjE,QAAIlB,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEO,OAAT,EAAkB;AAChB,UAAI,CAACP,GAAG,CAACO,OAAJ,CAAYY,SAAZ,CAAsBF,SAAtB,CAAL,EAAuC;AACrCjB,QAAAA,GAAG,CAACO,OAAJ,CAAYa,SAAZ,CAAsBH,SAAtB,EAAiC;AAC/BI,UAAAA,IAAI,EAAE,SADyB;AAE/BC,UAAAA,IAAI,EAAEX;AAFyB,SAAjC;AAID,OANe,CAOhB;;;AACAX,MAAAA,GAAG,CAACO,OAAJ,CAAYgB,QAAZ,CAAqB;AACnBC,QAAAA,EAAE,EAAG,GAAEP,SAAU,UADE;AAEnBQ,QAAAA,MAAM,EAAER,SAFW;AAGnBI,QAAAA,IAAI,EAAE,MAHa;AAInBK,QAAAA,KAAK,EAAE;AACL,wBAAcR,KADT;AAEL,wBAAc;AAFT;AAJY,OAArB;AASD;AACF,GAnBD;;AAqBA,QAAMS,cAAc,GAAG,CAAChB,OAAD,EAAUM,SAAV,EAAqBW,OAAO,GAAG,GAA/B,EAAoCV,KAAK,GAAG,SAA5C,KAA0D;AAC/E,QAAIlB,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEO,OAAT,EAAkB;AAChB,UAAI,CAACP,GAAG,CAACO,OAAJ,CAAYY,SAAZ,CAAsBF,SAAtB,CAAL,EAAuC;AACrCjB,QAAAA,GAAG,CAACO,OAAJ,CAAYa,SAAZ,CAAsBH,SAAtB,EAAiC;AAC/BI,UAAAA,IAAI,EAAE,SADyB;AAE/BC,UAAAA,IAAI,EAAEX;AAFyB,SAAjC;AAID,OANe,CAOhB;;;AACAX,MAAAA,GAAG,CAACO,OAAJ,CAAYgB,QAAZ,CAAqB;AACnBC,QAAAA,EAAE,EAAG,GAAEP,SAAU,OADE;AAEnBQ,QAAAA,MAAM,EAAER,SAFW;AAGnBI,QAAAA,IAAI,EAAE,MAHa;AAInBK,QAAAA,KAAK,EAAE;AACL,wBAAcR,KADT;AAEL,0BAAgBU;AAFX;AAJY,OAArB;AASD;AACF,GAnBD;;AAqBA9C,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAIkB,GAAG,CAACO,OAAR,EAAiB,OADH,CACW;;AACzBP,IAAAA,GAAG,CAACO,OAAJ,GAAc,IAAIvB,QAAQ,CAAC6C,GAAb,CAAiB;AAC7BC,MAAAA,SAAS,2BAAE/B,YAAY,CAACQ,OAAf,yEAA0B,EADN;AACU;AACvCwB,MAAAA,KAAK,EAAE,sDAFsB;AAG7BtB,MAAAA,MAAM,EAAEb,mBAHqB;AAI7BkB,MAAAA,IAAI,EAAEjB,YAJuB;AAK7BkB,MAAAA,KAAK,EAAEjB;AALsB,KAAjB,CAAd;AAOD,GATQ,EASN,EATM,CAAT,CA9DmG,CAyEnG;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEO,OAAT,EAAkB;AAChBP,MAAAA,GAAG,CAACO,OAAJ,CAAYyB,EAAZ,CAAe,MAAf,EAAuB,YAAY;AACjC,YAAIhC,GAAG,CAACO,OAAJ,IAAeP,GAAG,CAACO,OAAJ,CAAYY,SAAZ,CAAsB,QAAtB,CAAnB,EAAoD,OADnB,CAC2B;;AAC5DH,QAAAA,eAAe,CAACtB,MAAM,CAACgB,QAAP,CAAgBC,OAAjB,EAA0B,QAA1B,CAAf;AACAL,QAAAA,QAAQ,CAAC2B,OAAT,CAAiB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC9BR,UAAAA,cAAc,CAACO,IAAD,EAAOC,GAAG,CAACC,QAAJ,EAAP,EAAuB,CAAvB,EAA0B,SAA1B,CAAd;AACD,SAFD;AAGAC,QAAAA,UAAU,CAAC,MAAM;AACfnC,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OATD;AAUD;AACF,GAbQ,EAaN,CAACF,GAAG,CAACO,OAAL,EAAcZ,KAAd,CAbM,CAAT,CA1EmG,CAyFnG;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAAkB,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEO,OAAL,KAAgBJ,eAAhB,IAAmC,CAACH,GAAG,CAACO,OAAJ,CAAY+B,QAAZ,CAAqB,kBAArB,CAApC,IAAgFrC,SAApF,EAA+F;AAC7Fe,MAAAA,eAAe,CAACb,eAAe,CAACO,QAAhB,CAAyBC,OAA1B,EAAmC,aAAnC,EAAkD,MAAlD,CAAf;AACAgB,MAAAA,cAAc,CAACxB,eAAe,CAACO,QAAhB,CAAyBC,OAA1B,EAAmC,aAAnC,CAAd;AACD,KAHD,MAGO,IAAI,CAAAX,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEO,OAAL,KAAgBP,GAAG,CAACO,OAAJ,CAAY+B,QAAZ,CAAqB,kBAArB,CAAhB,IAA4DrC,SAAhE,EAA2E;AAChFD,MAAAA,GAAG,CAACO,OAAJ,CAAYgC,WAAZ,CAAwB,kBAAxB;AACAvC,MAAAA,GAAG,CAACO,OAAJ,CAAYgC,WAAZ,CAAwB,qBAAxB;AACAvC,MAAAA,GAAG,CAACO,OAAJ,CAAYiC,YAAZ,CAAyB,aAAzB;AACD;AACF,GATQ,EASN,CAACrC,eAAD,EAAkBH,GAAG,CAACO,OAAtB,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkB,CAACN,SAAD,iBAAc,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC,CADF,eAEE;AAAK,IAAA,GAAG,EAAEF,YAAV;AAAwB,IAAA,SAAS,EAAC,iDAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAED,SAAS0C,OAAT,GAAmB;AACjB,sBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,OAAO,EAAE;AAAEb,MAAAA,OAAO,EAAE;AAAX,KADX;AAEE,IAAA,IAAI,EAAE;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAFR;AAGE,IAAA,SAAS,EAAC,gGAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,IAAA,GAAG,EAAE3C,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\nimport loading from \"../assets/images/loading.gif\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport { useAppSelector } from \"../hooks\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\n\nexport default function PlotMap({ parcel, plots, startingCoordinates, startingZoom, startingPitch }) {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  const highlightedPlot = useAppSelector(state => state.plots.highlightedPlot);\n  const activePlot = useAppSelector(state => state.plots.activePlot);\n  const communal = useAppSelector(state => state.plots.communal);\n\n  // zoom to plot on selection\n  useEffect(() => {\n    if (map.current && activePlot) {\n      map.current.flyTo({\n        center: activePlot.metadata.geojson.geometry.coordinates[0][0],\n        zoom: startingZoom,\n        pitch: startingPitch,\n      });\n    }\n  }, [activePlot]);\n\n  const addOutlineToMap = (geojson, string_id, color = \"#eff551\") => {\n    if (map?.current) {\n      if (!map.current.getSource(string_id)) {\n        map.current.addSource(string_id, {\n          type: \"geojson\",\n          data: geojson,\n        });\n      }\n      // add plot outline\n      map.current.addLayer({\n        id: `${string_id}_outline`,\n        source: string_id,\n        type: \"line\",\n        paint: {\n          \"line-color\": color,\n          \"line-width\": 2,\n        },\n      });\n    }\n  };\n\n  const addFilledToMap = (geojson, string_id, opacity = 0.5, color = \"#eff551\") => {\n    if (map?.current) {\n      if (!map.current.getSource(string_id)) {\n        map.current.addSource(string_id, {\n          type: \"geojson\",\n          data: geojson,\n        });\n      }\n      // add plot outline\n      map.current.addLayer({\n        id: `${string_id}_fill`,\n        source: string_id,\n        type: \"fill\",\n        paint: {\n          \"fill-color\": color,\n          \"fill-opacity\": opacity,\n        },\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (map.current) return; // only render map once\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current ?? \"\", // should never need the fallback\n      style: \"mapbox://styles/gregrolwes/ckvsro22d1bj514oy7iy900av\",\n      center: startingCoordinates,\n      zoom: startingZoom,\n      pitch: startingPitch,\n    });\n  }, []);\n\n  // Draw parcel outline and communal land\n  useEffect(() => {\n    if (map?.current) {\n      map.current.on(\"load\", function () {\n        if (map.current && map.current.getSource(\"parcel\")) return; // skip if already added\n        addOutlineToMap(parcel.metadata.geojson, \"parcel\");\n        communal.forEach((plot, idx) => {\n          addFilledToMap(plot, idx.toString(), 1, \"#06be7f\");\n        });\n        setTimeout(() => {\n          setMapLoaded(true);\n        }, 1000);\n      });\n    }\n  }, [map.current, plots]);\n\n  // Add/remove plot highlight when highlighted plot changes\n  useEffect(() => {\n    if (map?.current && highlightedPlot && !map.current.getLayer(\"highlighted_fill\") && mapLoaded) {\n      addOutlineToMap(highlightedPlot.metadata.geojson, \"highlighted\", \"#fff\");\n      addFilledToMap(highlightedPlot.metadata.geojson, \"highlighted\");\n    } else if (map?.current && map.current.getLayer(\"highlighted_fill\") && mapLoaded) {\n      map.current.removeLayer(\"highlighted_fill\");\n      map.current.removeLayer(\"highlighted_outline\");\n      map.current.removeSource(\"highlighted\");\n    }\n  }, [highlightedPlot, map.current]);\n\n  return (\n    <div className=\"plot-map flex-grow flex flex-col relative\">\n      <AnimatePresence>{!mapLoaded && <Loading />}</AnimatePresence>\n      <div ref={mapContainer} className=\"absolute left-0 right-0 top-0 bottom-0 plot-map\" />\n    </div>\n  );\n}\n\nfunction Loading() {\n  return (\n    <motion.div\n      initial={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"plot-map bg-black absolute left-0 right-0 top-0 bottom-0 z-10 flex items-center justify-center\"\n    >\n      <img src={loading} alt=\"loading\" />\n    </motion.div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}