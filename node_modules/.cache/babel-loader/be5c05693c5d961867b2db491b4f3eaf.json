{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\n\nvar ObservableStore_1 = require(\"./ObservableStore\");\n\nvar MergedStore = /*#__PURE__*/function (_ObservableStore_1$Ob) {\n  _inherits(MergedStore, _ObservableStore_1$Ob);\n\n  var _super = _createSuper(MergedStore);\n\n  function MergedStore() {\n    var _this;\n\n    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, MergedStore);\n\n    // Typecast: Preserve existing behavior\n    _this = _super.call(this, {});\n    _this._children = children; // subscribe to children\n\n    children.forEach(function (child) {\n      return _this._addChild(child);\n    });\n\n    _this._updateWholeState();\n\n    return _this;\n  }\n\n  _createClass(MergedStore, [{\n    key: \"_addChild\",\n    value: function _addChild(child) {\n      var _this2 = this;\n\n      child.subscribe(function () {\n        return _this2._updateWholeState();\n      });\n    }\n  }, {\n    key: \"_updateWholeState\",\n    value: function _updateWholeState() {\n      var childStates = this._children.map(function (child) {\n        return child.getState();\n      }); // apply shallow merge over states\n\n\n      var state = Object.assign.apply(Object, [{}].concat(_toConsumableArray(childStates)));\n      this.putState(state);\n    }\n  }]);\n\n  return MergedStore;\n}(ObservableStore_1.ObservableStore);\n\nexports.MergedStore = MergedStore;","map":null,"metadata":{},"sourceType":"script"}