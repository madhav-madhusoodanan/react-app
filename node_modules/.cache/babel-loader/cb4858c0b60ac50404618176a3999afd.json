{"ast":null,"code":"import _regeneratorRuntime from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable import/no-dynamic-require */ /* eslint-disable global-require */import{useEffect,useState}from\"react\";import{useSelector}from\"react-redux\";var _require=require(\"ethers\"),ethers=_require.ethers;/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/export default function useContractLoader(providerOrSigner){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _useState=useState(),_useState2=_slicedToArray(_useState,2),contracts=_useState2[0],setContracts=_useState2[1];var DEBUG=useSelector(function(state){return state.debug.debug;});useEffect(function(){var active=true;function loadContracts(){return _loadContracts.apply(this,arguments);}function _loadContracts(){_loadContracts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var signer,provider,accounts,providerNetwork,_chainId,contractList,externalContractList,combinedContracts,hardhatNetwork,newContracts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(providerOrSigner&&typeof providerOrSigner!==\"undefined\")){_context.next=25;break;}_context.prev=1;if(!(providerOrSigner&&typeof providerOrSigner.listAccounts===\"function\")){_context.next=6;break;}_context.next=5;return providerOrSigner.listAccounts();case 5:accounts=_context.sent;case 6:if(ethers.Signer.isSigner(providerOrSigner)){signer=providerOrSigner;provider=signer.provider;}else if(accounts&&accounts.length>0){signer=providerOrSigner.getSigner();provider=providerOrSigner;}else{signer=providerOrSigner;provider=providerOrSigner;}_context.next=9;return provider.getNetwork();case 9:providerNetwork=_context.sent;_chainId=config.chainId||providerNetwork.chainId;contractList={};externalContractList={};try{contractList=config.hardhatContracts||require(\"../contracts/hardhat_contracts.json\");}catch(e){DEBUG&&console.log(e);}try{externalContractList=config.externalContracts||require(\"../contracts/external_contracts.js\");}catch(e){DEBUG&&console.log(e);}combinedContracts={};if(contractList[_chainId]){for(hardhatNetwork in contractList[_chainId]){if(Object.prototype.hasOwnProperty.call(contractList[_chainId],hardhatNetwork)){if(!config.hardhatNetworkName||hardhatNetwork===config.hardhatNetworkName){combinedContracts=_objectSpread(_objectSpread({},combinedContracts),contractList[_chainId][hardhatNetwork].contracts);}}}}if(externalContractList[_chainId]){combinedContracts=_objectSpread(_objectSpread({},combinedContracts),externalContractList[_chainId].contracts);}newContracts=Object.keys(combinedContracts).reduce(function(accumulator,contractName){var _address=config.customAddresses&&Object.keys(config.customAddresses).includes(contractName)?config.customAddresses[contractName]:combinedContracts[contractName].address;accumulator[contractName]=new ethers.Contract(_address,combinedContracts[contractName].abi,signer);return accumulator;},{});if(active)setContracts(newContracts);_context.next=25;break;case 22:_context.prev=22;_context.t0=_context[\"catch\"](1);DEBUG&&console.log(\"ERROR LOADING CONTRACTS!!\",_context.t0);case 25:case\"end\":return _context.stop();}}},_callee,null,[[1,22]]);}));return _loadContracts.apply(this,arguments);}loadContracts();return function(){active=false;};},[providerOrSigner]);return contracts;}","map":null,"metadata":{},"sourceType":"module"}