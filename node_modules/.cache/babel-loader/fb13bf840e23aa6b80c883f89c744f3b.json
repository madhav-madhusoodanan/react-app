{"ast":null,"code":"var _jsxFileName = \"/home/madhav/Documents/freelancers/app/packages/react-app/src/components/PlotDetail.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Divider } from \"antd\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport { useAppDispatch } from \"../hooks\";\nimport { setActivePlot } from \"../actions/plotsSlice\";\nimport LAND_IMG from \"../assets/images/SampleLandImage.png\";\nimport { BuyPlot, ViewPlot } from \".\";\nimport { fetchMetadata } from \"../data\";\nexport default function PlotDetail({\n  plot,\n  contracts,\n  injectedProvider\n}) {\n  var _plot$id$toString$len, _plotMetadata$image, _plotMetadata$descrip;\n\n  const [plotMetadata, setPlotMetadata] = useState({});\n  const dispatch = useAppDispatch();\n  const fetchPlotMetadata = useCallback(async () => {\n    const plotUri = await contracts.CityDaoParcel.getTokenMetadataUri(plot.id);\n    const plotManifestBuffer = await fetchMetadata(plotUri);\n    return JSON.parse(plotManifestBuffer.toString());\n  }, [contracts, plot.id]);\n  useEffect(() => {\n    fetchPlotMetadata().then(setPlotMetadata);\n  }, [contracts, plot]);\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot-detail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot-detail-header flex justify-between items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"plot-title primary-font text-lg font-medium leading-6 mr-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, \"Plot #\", \"0\".repeat(4 - ((_plot$id$toString$len = plot.id.toString().length) !== null && _plot$id$toString$len !== void 0 ? _plot$id$toString$len : 0)), plot.id), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"plot-price secondary-font text-base font-light text-gray-9 leading-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, (plot === null || plot === void 0 ? void 0 : plot.price) && `(${plot.price.toString()} ETH)`)), /*#__PURE__*/React.createElement(\"a\", {\n    onClick: () => dispatch(setActivePlot(undefined)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CloseOutlined, {\n    style: {\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot-detail-content block p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col space-y-4 primary-font text-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(motion.img, {\n    src: (_plotMetadata$image = plotMetadata === null || plotMetadata === void 0 ? void 0 : plotMetadata.image) !== null && _plotMetadata$image !== void 0 ? _plotMetadata$image : LAND_IMG,\n    alt: plot === null || plot === void 0 ? void 0 : plot.id.toString(),\n    initial: {\n      x: -300,\n      opacity: 0\n    },\n    animate: {\n      x: 0,\n      opacity: 1\n    },\n    exit: {\n      x: -300,\n      opacity: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(motion.div, {\n    initial: {\n      x: -300,\n      opacity: 0\n    },\n    animate: {\n      x: 0,\n      opacity: 1\n    },\n    exit: {\n      x: -300,\n      opacity: 0\n    },\n    transition: {\n      delay: 0.1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, (plot === null || plot === void 0 ? void 0 : plot.sold) ? /*#__PURE__*/React.createElement(ViewPlot, {\n    plot: plot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(BuyPlot, {\n    plot: plot,\n    injectedProvider: injectedProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 56\n    }\n  })), /*#__PURE__*/React.createElement(motion.div, {\n    className: \"border-gray-4 text-left\",\n    initial: {\n      x: -300,\n      opacity: 0\n    },\n    animate: {\n      x: 0,\n      opacity: 1\n    },\n    exit: {\n      x: -300,\n      opacity: 0\n    },\n    transition: {\n      delay: 0.2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"Properties\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col justify-between p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, plot.metadata.location && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-2 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, \"Location: \", plot.metadata.location), plotMetadata.terrain && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-2 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, \"Terrain: \", plotMetadata.terrain), plotMetadata.sqft && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-2 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, \"Size: \", plotMetadata.sqft), plot.metadata.coordinates && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-2 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, \"Coordinates:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }), plot.metadata.coordinates), !plotMetadata.sqft && !plotMetadata.terrain && !plot.metadata.location && !plot.metadata.coordinates && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-2 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"No plot properties available.\"))), /*#__PURE__*/React.createElement(motion.div, {\n    className: \"border-gray-4 text-left\",\n    initial: {\n      x: -300,\n      opacity: 0\n    },\n    animate: {\n      x: 0,\n      opacity: 1\n    },\n    exit: {\n      x: -300,\n      opacity: 0\n    },\n    transition: {\n      delay: 0.4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Owner Rights\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col justify-between p-4 secondary-font text-base font-light text-gray-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, (_plotMetadata$descrip = plotMetadata === null || plotMetadata === void 0 ? void 0 : plotMetadata.description) !== null && _plotMetadata$descrip !== void 0 ? _plotMetadata$descrip : \"Could not retrieve owner rights from the contract.\"))))));\n}","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/components/PlotDetail.tsx"],"names":["React","useCallback","useEffect","useState","Divider","AnimatePresence","motion","CloseOutlined","useAppDispatch","setActivePlot","LAND_IMG","BuyPlot","ViewPlot","fetchMetadata","PlotDetail","plot","contracts","injectedProvider","plotMetadata","setPlotMetadata","dispatch","fetchPlotMetadata","plotUri","CityDaoParcel","getTokenMetadataUri","id","plotManifestBuffer","JSON","parse","toString","then","repeat","length","price","undefined","fontSize","image","x","opacity","delay","sold","metadata","location","terrain","sqft","coordinates","description"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Divider } from \"antd\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport { Plot } from \"../models/Plot\";\nimport { useAppDispatch } from \"../hooks\";\nimport { setActivePlot } from \"../actions/plotsSlice\";\n\nimport LAND_IMG from \"../assets/images/SampleLandImage.png\";\nimport { BuyPlot, ViewPlot } from \".\";\nimport { fetchMetadata } from \"../data\";\n\ninterface Props {\n  plot: Plot;\n  contracts: any;\n  injectedProvider: any;\n}\n\nexport default function PlotDetail({ plot, contracts, injectedProvider }: Props) {\n  const [plotMetadata, setPlotMetadata] = useState<any>({} as any);\n  const dispatch = useAppDispatch();\n\n  const fetchPlotMetadata = useCallback(async () => {\n    const plotUri = await contracts.CityDaoParcel.getTokenMetadataUri(plot.id);\n    const plotManifestBuffer = await fetchMetadata(plotUri);\n    return JSON.parse(plotManifestBuffer.toString()) as any;\n  }, [contracts, plot.id]);\n\n  useEffect(() => {\n    fetchPlotMetadata().then(setPlotMetadata);\n  }, [contracts, plot]);\n\n  return (\n    <AnimatePresence>\n      <div className=\"plot-detail\">\n        {/* HEADER */}\n        <div className=\"plot-detail-header flex justify-between items-center\">\n          <div className=\"flex justify-start\">\n            <span className=\"plot-title primary-font text-lg font-medium leading-6 mr-4\">\n              Plot #{\"0\".repeat(4 - (plot.id.toString().length ?? 0))}\n              {plot.id}\n            </span>\n            <span className=\"plot-price secondary-font text-base font-light text-gray-9 leading-6\">\n              {plot?.price && `(${plot.price.toString()} ETH)`}\n            </span>\n          </div>\n          <a onClick={() => dispatch(setActivePlot(undefined))}>\n            <CloseOutlined style={{ fontSize: 20 }} />\n          </a>\n        </div>\n        <Divider />\n\n        <div className=\"plot-detail-content block p-4\">\n          <div className=\"flex flex-col space-y-4 primary-font text-lg\">\n            <motion.img\n              src={plotMetadata?.image ?? LAND_IMG}\n              alt={plot?.id.toString()}\n              initial={{ x: -300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -300, opacity: 0 }}\n            />\n            <motion.div\n              initial={{ x: -300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -300, opacity: 0 }}\n              transition={{ delay: 0.1 }}\n            >\n              {plot?.sold ? <ViewPlot plot={plot} /> : <BuyPlot plot={plot} injectedProvider={injectedProvider} />}\n            </motion.div>\n            <motion.div\n              className=\"border-gray-4 text-left\"\n              initial={{ x: -300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -300, opacity: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <div className=\"p-4 text-white\">Properties</div>\n              <Divider />\n              <div className=\"flex flex-col justify-between p-4\">\n                {plot.metadata.location && (\n                  <div className=\"py-2 secondary-font text-base font-light text-gray-9\">\n                    Location: {plot.metadata.location}\n                  </div>\n                )}\n                {plotMetadata.terrain && (\n                  <div className=\"py-2 secondary-font text-base font-light text-gray-9\">\n                    Terrain: {plotMetadata.terrain}\n                  </div>\n                )}\n                {plotMetadata.sqft && (\n                  <div className=\"py-2 secondary-font text-base font-light text-gray-9\">Size: {plotMetadata.sqft}</div>\n                )}\n                {plot.metadata.coordinates && (\n                  <div className=\"py-2 secondary-font text-base font-light text-gray-9\">\n                    Coordinates:\n                    <br />\n                    {plot.metadata.coordinates}\n                  </div>\n                )}\n                {/* Fallback text */}\n                {!plotMetadata.sqft &&\n                  !plotMetadata.terrain &&\n                  !plot.metadata.location &&\n                  !plot.metadata.coordinates && (\n                    <div className=\"py-2 secondary-font text-base font-light text-gray-9\">\n                      No plot properties available.\n                    </div>\n                  )}\n              </div>\n            </motion.div>\n            <motion.div\n              className=\"border-gray-4 text-left\"\n              initial={{ x: -300, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -300, opacity: 0 }}\n              transition={{ delay: 0.4 }}\n            >\n              <div className=\"p-4 text-white\">Owner Rights</div>\n              <Divider />\n              <div className=\"flex flex-col justify-between p-4 secondary-font text-base font-light text-gray-9\">\n                {plotMetadata?.description ?? \"Could not retrieve owner rights from the contract.\"}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </AnimatePresence>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}