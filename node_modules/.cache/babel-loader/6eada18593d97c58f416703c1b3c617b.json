{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _asyncIterator = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input');\n\nvar toStream = require('./to-stream');\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar modeToString = require('../lib/mode-to-string');\n\nvar mtimeToObject = require('../lib/mtime-to-object');\n\nvar merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nfunction multipartRequest() {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var source,\n        abortController,\n        headers,\n        boundary,\n        streamFiles,\n        _streamFiles,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _streamFiles = function _streamFiles3() {\n              _streamFiles = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n                var index, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, _mtimeToObject, secs, nsecs;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        index = 0;\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context.prev = 4;\n                        _iterator = _asyncIterator(normaliseInput(source));\n\n                      case 6:\n                        _context.next = 8;\n                        return _awaitAsyncGenerator(_iterator.next());\n\n                      case 8:\n                        _step = _context.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context.next = 12;\n                        return _awaitAsyncGenerator(_step.value);\n\n                      case 12:\n                        _value = _context.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context.next = 45;\n                          break;\n                        }\n\n                        _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n                        fileSuffix = '';\n                        type = content ? 'file' : 'dir';\n\n                        if (!(index > 0)) {\n                          _context.next = 21;\n                          break;\n                        }\n\n                        _context.next = 20;\n                        return '\\r\\n';\n\n                      case 20:\n                        fileSuffix = \"-\".concat(index);\n\n                      case 21:\n                        _context.next = 23;\n                        return \"--\".concat(boundary, \"\\r\\n\");\n\n                      case 23:\n                        _context.next = 25;\n                        return \"Content-Disposition: form-data; name=\\\"\".concat(type).concat(fileSuffix, \"\\\"; filename=\\\"\").concat(encodeURIComponent(path), \"\\\"\\r\\n\");\n\n                      case 25:\n                        _context.next = 27;\n                        return \"Content-Type: \".concat(content ? 'application/octet-stream' : 'application/x-directory', \"\\r\\n\");\n\n                      case 27:\n                        if (!(mode !== null && mode !== undefined)) {\n                          _context.next = 30;\n                          break;\n                        }\n\n                        _context.next = 30;\n                        return \"mode: \".concat(modeToString(mode), \"\\r\\n\");\n\n                      case 30:\n                        if (!(mtime != null)) {\n                          _context.next = 37;\n                          break;\n                        }\n\n                        _mtimeToObject = mtimeToObject(mtime), secs = _mtimeToObject.secs, nsecs = _mtimeToObject.nsecs;\n                        _context.next = 34;\n                        return \"mtime: \".concat(secs, \"\\r\\n\");\n\n                      case 34:\n                        if (!(nsecs != null)) {\n                          _context.next = 37;\n                          break;\n                        }\n\n                        _context.next = 37;\n                        return \"mtime-nsecs: \".concat(nsecs, \"\\r\\n\");\n\n                      case 37:\n                        _context.next = 39;\n                        return '\\r\\n';\n\n                      case 39:\n                        if (!content) {\n                          _context.next = 41;\n                          break;\n                        }\n\n                        return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(content), _awaitAsyncGenerator), \"t0\", 41);\n\n                      case 41:\n                        index++;\n\n                      case 42:\n                        _iteratorNormalCompletion = true;\n                        _context.next = 6;\n                        break;\n\n                      case 45:\n                        _context.next = 51;\n                        break;\n\n                      case 47:\n                        _context.prev = 47;\n                        _context.t1 = _context[\"catch\"](4);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t1;\n\n                      case 51:\n                        _context.prev = 51;\n                        _context.prev = 52;\n\n                        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                          _context.next = 56;\n                          break;\n                        }\n\n                        _context.next = 56;\n                        return _awaitAsyncGenerator(_iterator.return());\n\n                      case 56:\n                        _context.prev = 56;\n\n                        if (!_didIteratorError) {\n                          _context.next = 59;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 59:\n                        return _context.finish(56);\n\n                      case 60:\n                        return _context.finish(51);\n\n                      case 61:\n                        _context.next = 66;\n                        break;\n\n                      case 63:\n                        _context.prev = 63;\n                        _context.t2 = _context[\"catch\"](0);\n                        // workaround for https://github.com/node-fetch/node-fetch/issues/753\n                        abortController.abort(_context.t2);\n\n                      case 66:\n                        _context.prev = 66;\n                        _context.next = 69;\n                        return \"\\r\\n--\".concat(boundary, \"--\\r\\n\");\n\n                      case 69:\n                        return _context.finish(66);\n\n                      case 70:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 63, 66, 70], [4, 47, 51, 61], [52,, 56, 60]]);\n              }));\n              return _streamFiles.apply(this, arguments);\n            };\n\n            streamFiles = function _streamFiles2(_x) {\n              return _streamFiles.apply(this, arguments);\n            };\n\n            source = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : '';\n            abortController = _args2.length > 1 ? _args2[1] : undefined;\n            headers = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            boundary = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : \"-----------------------------\".concat(nanoid());\n            _context2.t0 = merge(headers, {\n              'Content-Type': \"multipart/form-data; boundary=\".concat(boundary)\n            });\n            _context2.next = 9;\n            return toStream(streamFiles(source));\n\n          case 9:\n            _context2.t1 = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              headers: _context2.t0,\n              body: _context2.t1\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\n\nmodule.exports = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}