{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\n\nvar stream_1 = require(\"stream\");\n\nvar ObservableStoreStream = /*#__PURE__*/function (_stream_1$Duplex) {\n  _inherits(ObservableStoreStream, _stream_1$Duplex);\n\n  var _super = _createSuper(ObservableStoreStream);\n\n  function ObservableStoreStream(obsStore) {\n    var _this;\n\n    _classCallCheck(this, ObservableStoreStream);\n\n    _this = _super.call(this, {\n      // pass values, not serializations\n      objectMode: true\n    }); // dont buffer outgoing updates\n\n    _this.resume(); // save handler so we can unsubscribe later\n\n\n    _this.handler = function (state) {\n      return _this.push(state);\n    }; // subscribe to obsStore changes\n\n\n    _this.obsStore = obsStore;\n\n    _this.obsStore.subscribe(_this.handler);\n\n    return _this;\n  } // emit current state on new destination\n\n\n  _createClass(ObservableStoreStream, [{\n    key: \"pipe\",\n    value: function pipe(dest, options) {\n      var result = _get(_getPrototypeOf(ObservableStoreStream.prototype), \"pipe\", this).call(this, dest, options);\n\n      dest.write(this.obsStore.getState());\n      return result;\n    } // write from incoming stream to state\n\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      this.obsStore.putState(chunk);\n      callback();\n    } // noop - outgoing stream is asking us if we have data we arent giving it\n\n  }, {\n    key: \"_read\",\n    value: function _read(_size) {\n      return undefined;\n    } // unsubscribe from event emitter\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(err, callback) {\n      this.obsStore.unsubscribe(this.handler);\n\n      _get(_getPrototypeOf(ObservableStoreStream.prototype), \"_destroy\", this).call(this, err, callback);\n    }\n  }]);\n\n  return ObservableStoreStream;\n}(stream_1.Duplex);\n\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\n\nexports.storeAsStream = storeAsStream;","map":null,"metadata":{},"sourceType":"script"}