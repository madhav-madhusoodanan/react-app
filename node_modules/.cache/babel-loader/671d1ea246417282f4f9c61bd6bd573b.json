{"ast":null,"code":"var _jsxFileName = \"/home/madhav/Documents/freelancers/app/packages/react-app/src/views/Whitelist.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { toast } from \"react-toastify\";\nimport { useContractLoader, useAppSelector } from \"../hooks\";\nimport { ConnectWalletButton } from \"../components\";\nimport { logoutOfWeb3Modal } from \"../helpers\";\nimport EnterRaffle from \"../components/EnterRaffle\";\nexport default function Whitelist({\n  networkProvider,\n  web3Modal\n}) {\n  const DEBUG = useAppSelector(state => state.debug.debug);\n  const userAddress = useAppSelector(state => state.user.address);\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [whitelistingEnabled, setWhitelistingEnabled] = useState(false);\n  const [enteredRaffle, setEnteredRaffle] = useState(false);\n  const contracts = useContractLoader(networkProvider);\n\n  const updateStatus = () => {\n    if (contracts) {\n      contracts.CityDaoParcel.isWhitelisting().then(setWhitelistingEnabled);\n      userAddress && contracts.CityDaoParcel.enteredRaffle(userAddress).then(setEnteredRaffle);\n    }\n  };\n\n  useEffect(() => {\n    updateStatus();\n  }, [contracts, networkProvider, userAddress]);\n  const loadWeb3Modal = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      provider.on(\"chainChanged\", chainId => {\n        DEBUG && console.log(`chain changed to ${chainId}! updating providers`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n      provider.on(\"accountsChanged\", () => {\n        DEBUG && console.log(`account changed!`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      }); // Subscribe to session disconnection\n\n      provider.on(\"disconnect\", (code, reason) => {\n        DEBUG && console.log(code, reason);\n        logoutOfWeb3Modal(web3Modal);\n      });\n    } catch (error) {\n      toast.error(\"Error connecting to a wallet\");\n    }\n  }, [setInjectedProvider, DEBUG]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col flex-grow min-w-0 items-center justify-center gap-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/logo512.png\",\n    alt: \"logo\",\n    className: \"w-64\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), whitelistingEnabled ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"primary-font text-xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"CityDAO Parcel 0 Drop\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-row gap-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ConnectWalletButton, {\n    onClick: loadWeb3Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EnterRaffle, {\n    injectedProvider: injectedProvider,\n    inRaffle: enteredRaffle,\n    resetStatus: updateStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"primary-font text-xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Whitelisting has ended.\"));\n}","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/views/Whitelist.tsx"],"names":["React","useCallback","useEffect","useState","ethers","toast","useContractLoader","useAppSelector","ConnectWalletButton","logoutOfWeb3Modal","EnterRaffle","Whitelist","networkProvider","web3Modal","DEBUG","state","debug","userAddress","user","address","injectedProvider","setInjectedProvider","whitelistingEnabled","setWhitelistingEnabled","enteredRaffle","setEnteredRaffle","contracts","updateStatus","CityDaoParcel","isWhitelisting","then","loadWeb3Modal","provider","connect","providers","Web3Provider","on","chainId","console","log","code","reason","error"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { toast } from \"react-toastify\";\n\nimport { useContractLoader, useAppSelector, useUserSigner } from \"../hooks\";\nimport { ConnectWalletButton } from \"../components\";\nimport { logoutOfWeb3Modal, Transactor } from \"../helpers\";\nimport EnterRaffle from \"../components/EnterRaffle\";\n\ninterface Props {\n  networkProvider: any;\n  web3Modal: any;\n}\n\nexport default function Whitelist({ networkProvider, web3Modal }: Props) {\n  const DEBUG = useAppSelector(state => state.debug.debug);\n  const userAddress = useAppSelector(state => state.user.address);\n  const [injectedProvider, setInjectedProvider] = useState<ethers.providers.Web3Provider>();\n  const [whitelistingEnabled, setWhitelistingEnabled] = useState(false);\n  const [enteredRaffle, setEnteredRaffle] = useState(false);\n\n  const contracts: any = useContractLoader(networkProvider);\n\n  const updateStatus = () => {\n    if (contracts) {\n      contracts.CityDaoParcel.isWhitelisting().then(setWhitelistingEnabled);\n      userAddress && contracts.CityDaoParcel.enteredRaffle(userAddress).then(setEnteredRaffle);\n    }\n  };\n\n  useEffect(() => {\n    updateStatus();\n  }, [contracts, networkProvider, userAddress]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n      provider.on(\"chainChanged\", (chainId: string) => {\n        DEBUG && console.log(`chain changed to ${chainId}! updating providers`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n\n      provider.on(\"accountsChanged\", () => {\n        DEBUG && console.log(`account changed!`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n\n      // Subscribe to session disconnection\n      provider.on(\"disconnect\", (code: string, reason: string) => {\n        DEBUG && console.log(code, reason);\n        logoutOfWeb3Modal(web3Modal);\n      });\n    } catch (error) {\n      toast.error(\"Error connecting to a wallet\");\n    }\n  }, [setInjectedProvider, DEBUG]);\n\n  return (\n    <div className=\"flex flex-col flex-grow min-w-0 items-center justify-center gap-8\">\n      <img src=\"/logo512.png\" alt=\"logo\" className=\"w-64\" />\n      {whitelistingEnabled ? (\n        <>\n          <div className=\"primary-font text-xl\">CityDAO Parcel 0 Drop</div>\n          <div className=\"flex flex-row gap-8\">\n            <ConnectWalletButton onClick={loadWeb3Modal} />\n            <EnterRaffle injectedProvider={injectedProvider} inRaffle={enteredRaffle} resetStatus={updateStatus} />\n          </div>\n        </>\n      ) : (\n        <div className=\"primary-font text-xl\">Whitelisting has ended.</div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}