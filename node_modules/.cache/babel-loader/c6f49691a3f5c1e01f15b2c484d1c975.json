{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (result && typeof result === \"object\") {\n    return Array.isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n\n      return true;\n    });\n  }\n\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return value !== null && typeof value === \"object\" && !isReference(value) && !Array.isArray(value);\n}\nexport function isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\n\nvar reconcileProcessedFields = function reconcileProcessedFields(existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n\n  return this.merge(existing, incoming);\n};","map":null,"metadata":{},"sourceType":"module"}