{"ast":null,"code":"var _jsxFileName = \"/home/madhav/Documents/freelancers/app/packages/react-app/src/views/BrowsePlots.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useContractLoader, useAppSelector, useAppDispatch, useUserSigner } from \"../hooks\";\nimport { PlotMap, ProgressBar, PlotDetail, LogoDisplay, Header } from \"../components\";\nimport { setPlots } from \"../actions\";\nimport { PlotTabs } from \"../components\";\nimport { logoutOfWeb3Modal } from \"../helpers\";\nimport { fetchedPlots, setCommunalLand, setParcelGeojson } from \"../actions/plotsSlice\";\nimport { fetchMetadata } from \"../data\";\nimport updatePlots from \"../helpers/UpdatePlots\";\nimport { setWhitelistedAmount } from \"../actions/userSlice\";\nexport default function BrowsePlots({\n  networkProvider,\n  web3Modal\n}) {\n  const dispatch = useAppDispatch();\n  const DEBUG = useAppSelector(state => state.debug.debug);\n  const plots = useAppSelector(state => state.plots.plots);\n  const activePlot = useAppSelector(state => state.plots.activePlot);\n  const parcel = useAppSelector(state => state.plots.parcel);\n  const userAddress = useAppSelector(state => state.user.address);\n  const contracts = useContractLoader(networkProvider);\n  const whitelistedAmount = useAppSelector(state => state.user.whitelistedAmount);\n  const [injectedProvider, setInjectedProvider] = useState();\n  useUserSigner(injectedProvider); // initialize signer\n\n  useEffect(() => {\n    if (!userAddress) {\n      return;\n    }\n\n    if (whitelistedAmount && whitelistedAmount > 0) {\n      toast.dismiss(\"notWhitelisted\");\n      toast.success(`You've been whitelisted to buy ${whitelistedAmount} plots ðŸŽ‰`, {\n        toastId: \"isWhitelisted\",\n        autoClose: false\n      });\n    } else {\n      toast.dismiss(\"isWhitelisted\");\n      toast.error(\"You aren't whitelisted to buy any plots yet ðŸ˜¢\", {\n        toastId: \"notWhitelisted\",\n        autoClose: false\n      });\n    }\n  }, [whitelistedAmount, userAddress]);\n  const loadWeb3Modal = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      provider.on(\"chainChanged\", chainId => {\n        DEBUG && console.log(`chain changed to ${chainId}! updating providers`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n      provider.on(\"accountsChanged\", () => {\n        DEBUG && console.log(`account changed!`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      }); // Subscribe to session disconnection\n\n      provider.on(\"disconnect\", (code, reason) => {\n        DEBUG && console.log(code, reason);\n        logoutOfWeb3Modal(web3Modal);\n      });\n    } catch (error) {\n      toast.error(\"Error connecting to a wallet\");\n    }\n  }, [setInjectedProvider, DEBUG]);\n\n  const readParcel = async () => {\n    try {\n      if (contracts && contracts.CityDaoParcel) {\n        const parcelUri = await contracts.CityDaoParcel.getParcelMetadataUri();\n        const parcelManifestBuffer = await fetchMetadata(parcelUri);\n        const parcelMetadata = JSON.parse(parcelManifestBuffer.toString());\n        dispatch(setParcelGeojson(parcelMetadata.plots[0]));\n        const communalUri = await contracts.CityDaoParcel.getCommunalLandMetadataUri();\n        const communalManifestBuffer = await fetchMetadata(communalUri);\n        const communalMetadata = JSON.parse(communalManifestBuffer.toString());\n        dispatch(setCommunalLand(communalMetadata.features));\n      }\n    } catch (e) {\n      toast.error(`Failed to find parcel. Make sure you're on the ${process.env.REACT_APP_NETWORK} network.`, {\n        className: \"error\",\n        toastId: \"contract-fail\"\n      });\n      DEBUG && console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    readParcel();\n  }, [contracts]);\n\n  const readWhitelistStatus = async () => {\n    try {\n      if (contracts && contracts.CityDaoParcel && userAddress) {\n        const whitelistedAmount = await contracts.CityDaoParcel.getWhitelistedAmount(userAddress);\n        dispatch(setWhitelistedAmount(whitelistedAmount.toNumber()));\n      }\n    } catch (e) {\n      dispatch(setWhitelistedAmount(0));\n    }\n  };\n\n  useEffect(() => {\n    readWhitelistStatus();\n  }, [contracts, userAddress, plots]);\n  updatePlots(contracts, plots, DEBUG).then(newPlots => {\n    if (newPlots.length !== plots.length) {\n      dispatch(setPlots(newPlots));\n      dispatch(fetchedPlots());\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"browse-plots-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/whitelist\",\n    className: \"logo-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LogoDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), activePlot !== undefined ? /*#__PURE__*/React.createElement(PlotDetail, {\n    plot: activePlot,\n    contracts: contracts,\n    injectedProvider: injectedProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(PlotTabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    connectWallet: loadWeb3Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlotMap, {\n    key: plots.length,\n    parcel: parcel,\n    plots: plots,\n    startingCoordinates: [-109.25689639464197, 44.922331600075466],\n    startingZoom: 15.825123438299038,\n    startingPitch: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/views/BrowsePlots.tsx"],"names":["React","useCallback","useEffect","useState","ethers","Link","toast","useContractLoader","useAppSelector","useAppDispatch","useUserSigner","PlotMap","ProgressBar","PlotDetail","LogoDisplay","Header","setPlots","PlotTabs","logoutOfWeb3Modal","fetchedPlots","setCommunalLand","setParcelGeojson","fetchMetadata","updatePlots","setWhitelistedAmount","BrowsePlots","networkProvider","web3Modal","dispatch","DEBUG","state","debug","plots","activePlot","parcel","userAddress","user","address","contracts","whitelistedAmount","injectedProvider","setInjectedProvider","dismiss","success","toastId","autoClose","error","loadWeb3Modal","provider","connect","providers","Web3Provider","on","chainId","console","log","code","reason","readParcel","CityDaoParcel","parcelUri","getParcelMetadataUri","parcelManifestBuffer","parcelMetadata","JSON","parse","toString","communalUri","getCommunalLandMetadataUri","communalManifestBuffer","communalMetadata","features","e","process","env","REACT_APP_NETWORK","className","readWhitelistStatus","getWhitelistedAmount","toNumber","then","newPlots","length","undefined"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport { useContractLoader, useAppSelector, useAppDispatch, useUserSigner } from \"../hooks\";\nimport { PlotMap, ProgressBar, PlotDetail, LogoDisplay, Header } from \"../components\";\nimport { setPlots } from \"../actions\";\nimport { PlotTabs } from \"../components\";\nimport { Plot } from \"../models/Plot\";\nimport { logoutOfWeb3Modal } from \"../helpers\";\nimport { fetchedPlots, setCommunalLand, setParcelGeojson } from \"../actions/plotsSlice\";\nimport { fetchMetadata } from \"../data\";\nimport updatePlots from \"../helpers/UpdatePlots\";\nimport { setWhitelistedAmount } from \"../actions/userSlice\";\n\ninterface Props {\n  networkProvider: any;\n  web3Modal: any;\n}\n\nexport default function BrowsePlots({ networkProvider, web3Modal }: Props) {\n  const dispatch = useAppDispatch();\n  const DEBUG = useAppSelector(state => state.debug.debug);\n  const plots = useAppSelector(state => state.plots.plots);\n  const activePlot = useAppSelector(state => state.plots.activePlot);\n  const parcel = useAppSelector(state => state.plots.parcel);\n  const userAddress = useAppSelector(state => state.user.address);\n  const contracts: any = useContractLoader(networkProvider);\n  const whitelistedAmount = useAppSelector(state => state.user.whitelistedAmount);\n  const [injectedProvider, setInjectedProvider] = useState<ethers.providers.Web3Provider>();\n\n  useUserSigner(injectedProvider); // initialize signer\n\n  useEffect(() => {\n    if (!userAddress) {\n      return;\n    }\n    if (whitelistedAmount && whitelistedAmount > 0) {\n      toast.dismiss(\"notWhitelisted\");\n      toast.success(`You've been whitelisted to buy ${whitelistedAmount} plots ðŸŽ‰`, {\n        toastId: \"isWhitelisted\",\n        autoClose: false,\n      });\n    } else {\n      toast.dismiss(\"isWhitelisted\");\n      toast.error(\"You aren't whitelisted to buy any plots yet ðŸ˜¢\", {\n        toastId: \"notWhitelisted\",\n        autoClose: false,\n      });\n    }\n  }, [whitelistedAmount, userAddress]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    try {\n      const provider = await web3Modal.connect();\n\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n      provider.on(\"chainChanged\", (chainId: string) => {\n        DEBUG && console.log(`chain changed to ${chainId}! updating providers`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n\n      provider.on(\"accountsChanged\", () => {\n        DEBUG && console.log(`account changed!`);\n        setInjectedProvider(new ethers.providers.Web3Provider(provider));\n      });\n\n      // Subscribe to session disconnection\n      provider.on(\"disconnect\", (code: string, reason: string) => {\n        DEBUG && console.log(code, reason);\n        logoutOfWeb3Modal(web3Modal);\n      });\n    } catch (error) {\n      toast.error(\"Error connecting to a wallet\");\n    }\n  }, [setInjectedProvider, DEBUG]);\n\n  const readParcel = async () => {\n    try {\n      if (contracts && contracts.CityDaoParcel) {\n        const parcelUri = await contracts.CityDaoParcel.getParcelMetadataUri();\n        const parcelManifestBuffer = await fetchMetadata(parcelUri);\n        const parcelMetadata = JSON.parse(parcelManifestBuffer.toString()) as any;\n        dispatch(setParcelGeojson(parcelMetadata.plots[0] as any));\n\n        const communalUri = await contracts.CityDaoParcel.getCommunalLandMetadataUri();\n        const communalManifestBuffer = await fetchMetadata(communalUri);\n        const communalMetadata = JSON.parse(communalManifestBuffer.toString()) as any;\n        dispatch(setCommunalLand(communalMetadata.features as any[]));\n      }\n    } catch (e) {\n      toast.error(`Failed to find parcel. Make sure you're on the ${process.env.REACT_APP_NETWORK} network.`, {\n        className: \"error\",\n        toastId: \"contract-fail\",\n      });\n      DEBUG && console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    readParcel();\n  }, [contracts]);\n\n  const readWhitelistStatus = async () => {\n    try {\n      if (contracts && contracts.CityDaoParcel && userAddress) {\n        const whitelistedAmount = await contracts.CityDaoParcel.getWhitelistedAmount(userAddress);\n        dispatch(setWhitelistedAmount(whitelistedAmount.toNumber()));\n      }\n    } catch (e) {\n      dispatch(setWhitelistedAmount(0));\n    }\n  };\n\n  useEffect(() => {\n    readWhitelistStatus();\n  }, [contracts, userAddress, plots]);\n\n  updatePlots(contracts, plots, DEBUG).then((newPlots: Plot[]) => {\n    if (newPlots.length !== plots.length) {\n      dispatch(setPlots(newPlots));\n      dispatch(fetchedPlots());\n    }\n  });\n\n  return (\n    <div className=\"browse-plots-wrapper\">\n      <ProgressBar />\n      <Link to=\"/whitelist\" className=\"logo-link\">\n        <LogoDisplay />\n      </Link>\n      {activePlot !== undefined ? (\n        <PlotDetail plot={activePlot} contracts={contracts} injectedProvider={injectedProvider} />\n      ) : (\n        <PlotTabs />\n      )}\n      <Header connectWallet={loadWeb3Modal} />\n      {/* key prop is to cause rerendering whenever it changes */}\n      <PlotMap\n        key={plots.length}\n        parcel={parcel}\n        plots={plots}\n        startingCoordinates={[-109.25689639464197, 44.922331600075466]}\n        startingZoom={15.825123438299038}\n        startingPitch={20}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}