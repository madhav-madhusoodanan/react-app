{"ast":null,"code":"var _jsxFileName = \"/home/madhav/Documents/freelancers/app/packages/react-app/src/Web3Wrapper.jsx\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport Torus from \"@toruslabs/torus-embed\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setExchangePrice, setGasPrice } from \"./actions\";\nimport { Wallet } from \"./components\";\nimport { INFURA_ID, NETWORKS } from \"./constants\";\nimport { useExchangePrice, useGasPrice } from \"./hooks\";\nimport { BrowsePlots, Whitelist } from \"./views\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst network = \"rinkeby\"; //process.env.REACT_APP_NETWORK;\n\nconst targetNetwork = NETWORKS[network]; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet, mumbai)\n\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null; // 🏠 Your local provider is usually pointed at your local blockchain\n\nconst providerUrl = targetNetwork.rpcUrl;\nconst networkProvider = network === \"localhost\" ? new ethers.providers.StaticJsonRpcProvider(providerUrl) : new ethers.providers.InfuraProvider(network, INFURA_ID);\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: INFURA_ID\n    }\n  },\n  coinbasewallet: {\n    package: CoinbaseWalletSDK,\n    options: {\n      appName: \"CityDAO - Parcel Explorer\",\n      infuraId: INFURA_ID,\n      chainId: targetNetwork.chainId,\n      darkMode: true\n    }\n  },\n  torus: {\n    package: Torus,\n    options: {\n      networkParams: {\n        host: targetNetwork.rpcUrl,\n        chainId: targetNetwork.chainId,\n        networkId: targetNetwork.chainId\n      }\n    }\n  },\n  binancechainwallet: {\n    package: true\n  }\n};\nconst web3Modal = new Web3Modal({\n  // network: network,\n  // cacheProvider: true,\n  theme: \"dark\",\n  providerOptions\n});\n\nfunction Web3Wrapper() {\n  const userAddress = useSelector(state => state.user.address);\n  const price = useSelector(state => state.network.exchangePrice);\n  const dispatch = useDispatch();\n  const mainnetProvider = mainnetInfura;\n  dispatch(setExchangePrice(useExchangePrice(targetNetwork, mainnetProvider)));\n  dispatch(setGasPrice(useGasPrice(targetNetwork, \"fast\")));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BrowsePlots, {\n    web3Modal: web3Modal,\n    networkProvider: networkProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/whitelist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Whitelist, {\n    web3Modal: web3Modal,\n    networkProvider: networkProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })))), process.env.NODE_ENV === \"development\" ? /*#__PURE__*/React.createElement(Wallet, {\n    price: price,\n    toAddress: userAddress,\n    provider: networkProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }) : null);\n}\n\nexport default Web3Wrapper;","map":{"version":3,"sources":["/home/madhav/Documents/freelancers/app/packages/react-app/src/Web3Wrapper.jsx"],"names":["WalletConnectProvider","CoinbaseWalletSDK","Torus","React","BrowserRouter","Route","Switch","Web3Modal","useSelector","useDispatch","setExchangePrice","setGasPrice","Wallet","INFURA_ID","NETWORKS","useExchangePrice","useGasPrice","BrowsePlots","Whitelist","ethers","require","network","targetNetwork","mainnetInfura","navigator","onLine","providers","StaticJsonRpcProvider","providerUrl","rpcUrl","networkProvider","InfuraProvider","providerOptions","walletconnect","package","options","infuraId","coinbasewallet","appName","chainId","darkMode","torus","networkParams","host","networkId","binancechainwallet","web3Modal","theme","Web3Wrapper","userAddress","state","user","address","price","exchangePrice","dispatch","mainnetProvider","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport Torus from \"@toruslabs/torus-embed\";\n\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { setExchangePrice, setGasPrice } from \"./actions\";\nimport { Wallet } from \"./components\";\nimport { INFURA_ID, NETWORKS } from \"./constants\";\nimport { useExchangePrice, useGasPrice } from \"./hooks\";\nimport { BrowsePlots, Whitelist } from \"./views\";\n\nconst { ethers } = require(\"ethers\");\n\nconst network = \"rinkeby\"; //process.env.REACT_APP_NETWORK;\nconst targetNetwork = NETWORKS[network]; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet, mumbai)\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst providerUrl = targetNetwork.rpcUrl;\nconst networkProvider =\n  network === \"localhost\"\n    ? new ethers.providers.StaticJsonRpcProvider(providerUrl)\n    : new ethers.providers.InfuraProvider(network, INFURA_ID);\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: INFURA_ID,\n    },\n  },\n  coinbasewallet: {\n    package: CoinbaseWalletSDK,\n    options: {\n      appName: \"CityDAO - Parcel Explorer\",\n      infuraId: INFURA_ID,\n      chainId: targetNetwork.chainId,\n      darkMode: true,\n    },\n  },\n  torus: {\n    package: Torus,\n    options: {\n      networkParams: {\n        host: targetNetwork.rpcUrl,\n        chainId: targetNetwork.chainId,\n        networkId: targetNetwork.chainId,\n      },\n    },\n  },\n  binancechainwallet: {\n    package: true,\n  },\n};\nconst web3Modal = new Web3Modal({\n  // network: network,\n  // cacheProvider: true,\n  theme: \"dark\",\n  providerOptions,\n});\n\nfunction Web3Wrapper() {\n  const userAddress = useSelector(state => state.user.address);\n  const price = useSelector(state => state.network.exchangePrice);\n\n  const dispatch = useDispatch();\n\n  const mainnetProvider = mainnetInfura;\n  dispatch(setExchangePrice(useExchangePrice(targetNetwork, mainnetProvider)));\n  dispatch(setGasPrice(useGasPrice(targetNetwork, \"fast\")));\n\n  return (\n    <>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <BrowsePlots web3Modal={web3Modal} networkProvider={networkProvider} />\n          </Route>\n          <Route exact path=\"/whitelist\">\n            <Whitelist web3Modal={web3Modal} networkProvider={networkProvider} />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n      {process.env.NODE_ENV === \"development\" ? (\n        <Wallet price={price} toAddress={userAddress} provider={networkProvider} />\n      ) : null}\n    </>\n  );\n}\n\nexport default Web3Wrapper;\n"]},"metadata":{},"sourceType":"module"}