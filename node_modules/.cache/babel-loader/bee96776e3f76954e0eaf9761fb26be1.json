{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\n\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["SYN","ACK","BRK","constructor","targetWindow","targetOrigin","objectMode","_init","_haveSyn","_name","_targetWindow","_targetOrigin","_onMessage","_synIntervalId","window","_break","_handShake","_onData","data","push","_postMessage","originConstraint","target","onMessage","message","event","_read","_write","cb","_destroy","Reflect","setTimeout","n","arr","copy","i","emit","args","doError","type","events","er","err","handler","safeApply","len","listeners","arrayClone","Number","code","toString","stringify","stack","getRpcPromiseCallback","unwrapResult","error","response","reject","Array","resolve","req","res","end","next","done","log","createStreamMiddleware","idMap","processResponse","context","Object","processNotification","isNotification","stream","read","write","processMessage","middleware","handlers","createIdRemapMiddleware","originalId","newId","randomId","logger","nextPromise","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","asyncMiddleware","_middleware","_runAllMiddleware","returnHandlers","isComplete","JRPCEngine","_runMiddleware","serializeError","returnHandler","_runReturnHandlers","_checkForCompletion","handle","asMiddleware","handlerCallback","_handleBatch","responses","Promise","reqs","_promiseHandle","_handle","id","jsonrpc","callerReq","_processRequest","engine","middlewareStack","opts","name","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","_substreams","createStream","substream","parent","anyStreamEnd","_error","ignoreStream","once","eos","readable","writable","mux","pump","dataObj","dataObjData","dataObjDataParam"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport { serializeError } from 'eth-rpc-errors';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}