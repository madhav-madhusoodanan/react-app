{"ast":null,"code":"import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport NodeDetailManager from '@toruslabs/fetch-node-details';\nimport { get, setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, BasePostMessageStream, setupMultiplex } from '@toruslabs/openlogin-jrpc';\nimport TorusJs from '@toruslabs/torus.js';\nimport deepmerge from 'lodash.merge';\nimport { ObservableStore, storeAsStream } from '@metamask/obs-store';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport dequal from 'fast-deep-equal';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport createHash from 'create-hash';\nimport { EventEmitter } from 'events';\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  TWITCH: \"twitch\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\"\n};\nconst WALLET_OPENLOGIN_VERIFIER_MAP = {\n  [LOGIN_PROVIDER.GOOGLE]: \"tkey-google\",\n  [LOGIN_PROVIDER.FACEBOOK]: \"tkey-facebook\",\n  [LOGIN_PROVIDER.TWITCH]: \"tkey-twitch\",\n  [LOGIN_PROVIDER.REDDIT]: \"tkey-reddit\",\n  [LOGIN_PROVIDER.DISCORD]: \"tkey-discord\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  BINANCE: \"binance\",\n  TESTING: \"testing\",\n  LRC: \"lrc\",\n  BETA: \"beta\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst paymentProviders$1 = {\n  [PAYMENT_PROVIDER.RAMPNETWORK]: {\n    line1: \"Debit Card/ Apple Pay/ Bank transfer\",\n    line2: \"0.49% - 2.9%\",\n    line3: \"5,000€/purchase, 20,000€/mo\",\n    supportPage: \"https://instant.ramp.network/\",\n    minOrderValue: 50,\n    maxOrderValue: 20000,\n    validCurrencies: [\"GBP\", \"EUR\", \"USD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"BSC_BNB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MOONPAY]: {\n    line1: \"Credit / Debit Card / Apple Pay\",\n    line2: \"4.5% or 5 USD\",\n    line3: \"2,000€/day, 10,000€/mo\",\n    supportPage: \"https://help.moonpay.io/en/\",\n    minOrderValue: 24.99,\n    maxOrderValue: 50000,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\", \"RUB\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"TUSD\", \"USDC\", \"USDT\", \"BNB_BSC\", \"BUSD_BSC\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.WYRE]: {\n    line1: \"Apple Pay/ Debit/ Credit Card\",\n    line2: \"4.9% + 30¢ or 5 USD\",\n    line3: \"$250/day\",\n    supportPage: \"https://support.sendwyre.com/en/\",\n    minOrderValue: 5,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"AUD\", \"CAD\", \"GBP\", \"EUR\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: false,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.XANPOOL]: {\n    line1: \"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow\",\n    line2: \"2.5% buying, 3% selling\",\n    line3: \"$2,500 / day\",\n    supportPage: \"mailto:support@xanpool.com\",\n    minOrderValue: 100,\n    maxOrderValue: 2500,\n    validCurrencies: [\"SGD\", \"HKD\", \"MYR\", \"PHP\", \"INR\", \"VND\", \"THB\", \"IDR\"],\n    validCryptoCurrencies: [\"ETH\", \"USDT\"],\n    includeFees: true,\n    sell: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MERCURYO]: {\n    line1: \"Credit/ Debit Card/ Apple Pay\",\n    line2: \"3.95% or 4 USD\",\n    line3: \"10,000€/day, 25,000€/mo\",\n    supportPage: \"mailto:support@mercuryo.io\",\n    minOrderValue: 30,\n    maxOrderValue: 5000,\n    validCurrencies: [\"USD\", \"EUR\", \"RUB\", \"TRY\", \"GBP\", \"UAH\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"BAT\", \"USDT\", \"OKB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.TRANSAK]: {\n    line1: \"Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)\",\n    line2: \"0.99% - 5.5% or 5 USD\",\n    line3: \"500€/day\",\n    supportPage: \"https://support.transak.com/hc/en-US\",\n    minOrderValue: 20,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: true,\n    enforceMax: false\n  }\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  paymentProviders: paymentProviders$1,\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: \"torus-\"\n};\n\nconst runOnLoad = fn => new Promise((resolve, reject) => {\n  if (window.document.body != null) {\n    Promise.resolve(fn()).then(resolve).catch(reject);\n  } else {\n    window.document.addEventListener(\"DOMContentLoaded\", () => {\n      Promise.resolve(fn()).then(resolve).catch(reject);\n    });\n  }\n});\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nconst handleStream = (handle, eventName, handler) => {\n  const handlerWrapper = chunk => {\n    handler(chunk);\n    handle.removeListener(eventName, handlerWrapper);\n  };\n\n  handle.on(eventName, handlerWrapper);\n};\n\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nvar log = loglevel.getLogger(\"torus-embed\");\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    sendSiteMetadata: () => \"Torus: Failed to send site metadata. This is an internal error, please report this bug.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners, shouldSendMetadata) => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \", shouldSendMetadata: \").concat(shouldSendMetadata, \" }\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {\n    // deprecated methods\n    enableDeprecation: 'Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. ' + 'Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',\n    sendDeprecation: 'Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future.' + ' Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n    events: {\n      close: 'Torus: The event \"close\" is deprecated and may be removed in the future. Please use \"disconnect\" instead.' + \"\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",\n      data: 'Torus: The event \"data\" is deprecated and will be removed in the future.' + 'Use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',\n      networkChanged: 'Torus: The event \"networkChanged\" is deprecated and may be removed in the future.' + ' Please use \"chainChanged\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n      notification: 'Torus: The event \"notification\" is deprecated and may be removed in the future. ' + 'Please use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'\n    },\n    publicConfigStore: 'Torus: The property \"publicConfigStore\" is deprecated and WILL be removed in the future.'\n  }\n};\nconst {\n  paymentProviders\n} = configuration;\n\nconst validatePaymentProvider = (provider, params) => {\n  const errors = {};\n\n  if (!provider) {\n    return {\n      errors,\n      isValid: true\n    };\n  }\n\n  if (provider && !paymentProviders[provider]) {\n    errors.provider = \"Invalid Provider\";\n    return {\n      errors,\n      isValid: Object.keys(errors).length === 0\n    };\n  }\n\n  const selectedProvider = paymentProviders[provider];\n  const selectedParams = params || {}; // set default values\n  // if (!selectedParams.selectedCurrency) [selectedParams.selectedCurrency] = selectedProvider.validCurrencies\n  // if (!selectedParams.fiatValue) selectedParams.fiatValue = selectedProvider.minOrderValue\n  // if (!selectedParams.selectedCryptoCurrency) [selectedParams.selectedCryptoCurrency] = selectedProvider.validCryptoCurrencies\n  // validations\n\n  if (selectedParams.fiatValue) {\n    const requestedOrderAmount = +parseFloat(selectedParams.fiatValue.toString()) || 0;\n    if (requestedOrderAmount < selectedProvider.minOrderValue) errors.fiatValue = \"Requested amount is lower than supported\";\n    if (requestedOrderAmount > selectedProvider.maxOrderValue && selectedProvider.enforceMax) errors.fiatValue = \"Requested amount is higher than supported\";\n  }\n\n  if (selectedParams.selectedCurrency && !selectedProvider.validCurrencies.includes(selectedParams.selectedCurrency)) {\n    errors.selectedCurrency = \"Unsupported currency\";\n  }\n\n  if (selectedParams.selectedCryptoCurrency && !selectedProvider.validCryptoCurrencies.includes(selectedParams.selectedCryptoCurrency)) {\n    errors.selectedCryptoCurrency = \"Unsupported cryptoCurrency\";\n  }\n\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n}; // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"MetaMask - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n} // resolve response.result or response, reject errors\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"MetaMask: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nconst getPreopenInstanceId = () => Math.random().toString(36).slice(2);\n\nconst getTorusUrl = async (buildEnv, integrity) => {\n  let torusUrl;\n  let logLevel; // Do not change this line\n\n  const version = \"1.22.2\";\n  let versionUsed = integrity.version || version;\n\n  try {\n    if ((buildEnv === \"binance\" || buildEnv === \"production\") && !integrity.version) {\n      let response;\n      if (!configuration.prodTorusUrl) response = await get(\"\".concat(configuration.api, \"/latestversion?name=@toruslabs/torus-embed&version=\").concat(version), {}, {\n        useAPIKey: true\n      });else response = {\n        data: configuration.prodTorusUrl\n      };\n      versionUsed = response.data; // eslint-disable-next-line require-atomic-updates\n\n      configuration.prodTorusUrl = response.data;\n    }\n  } catch (error) {\n    log.error(error, \"unable to fetch latest version\");\n  }\n\n  log.info(\"version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"binance\":\n      torusUrl = \"https://binance.tor.us/v\".concat(versionUsed);\n      logLevel = \"info\";\n      break;\n\n    case \"testing\":\n      torusUrl = \"https://testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"lrc\":\n      torusUrl = \"https://lrc.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"beta\":\n      torusUrl = \"https://beta.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:4050\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://app.tor.us/v\".concat(versionUsed);\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\n\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nconst EMITTED_NOTIFICATIONS = [\"eth_subscription\" // per eth-json-rpc-filters/subscriptionManager\n];\n\nconst NOOP = () => {// empty function\n};\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375\";\nconst FEATURES_DEFAULT_WALLET_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315\";\nconst FEATURES_CONFIRM_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450\";\n\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n\nfunction getPopupFeatures() {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const w = 1200;\n  const h = 700;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nSafeEventEmitter.defaultMaxListeners = 100; // resolve response.result, reject errors\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      return reject(error || response.error);\n    }\n\n    return !unwrapResult || Array.isArray(response) ? resolve(response) : resolve(response.result);\n  };\n};\n\nclass TorusInpageProvider extends SafeEventEmitter {\n  /**\n   * The chain ID of the currently connected Ethereum chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Ethereum address.\n   * If null, MetaMask is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  constructor(connectionStream) {\n    let {\n      maxEventListeners = 100,\n      shouldSendMetadata = true,\n      jsonRpcStreamName = \"provider\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"networkVersion\", void 0);\n\n    _defineProperty(this, \"shouldSendMetadata\", void 0);\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_publicConfigStore\", void 0);\n\n    _defineProperty(this, \"tryPreopenHandle\", void 0);\n\n    _defineProperty(this, \"enable\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_jsonRpcConnection\", void 0);\n\n    _defineProperty(this, \"_sentWarnings\", {\n      // methods\n      enable: false,\n      experimentalMethods: false,\n      send: false,\n      publicConfigStore: false,\n      // events\n      events: {\n        close: false,\n        data: false,\n        networkChanged: false,\n        notification: false\n      }\n    });\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners); // private state\n\n    this._state = _objectSpread$1({}, TorusInpageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.networkVersion = null;\n    this.chainId = null;\n    this.shouldSendMetadata = shouldSendMetadata; // bind functions (to prevent e.g. web3@1.x from making unbound calls)\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._sendSync = this._sendSync.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"MetaMask\")); // subscribe to metamask public config (one-way)\n\n    this._publicConfigStore = new ObservableStore({\n      storageKey: \"Metamask-Config\"\n    }); // handle isUnlocked changes, and chainChanged and networkChanged events\n    // this._publicConfigStore.subscribe((stringifiedState) => {\n    //   // This is because we are using store as string\n    //   const state = JSON.parse(stringifiedState as unknown as string);\n    //   if (\"isUnlocked\" in state && state.isUnlocked !== this._state.isUnlocked) {\n    //     this._state.isUnlocked = state.isUnlocked;\n    //     if (!this._state.isUnlocked) {\n    //       // accounts are never exposed when the extension is locked\n    //       this._handleAccountsChanged([]);\n    //     } else {\n    //       // this will get the exposed accounts, if any\n    //       try {\n    //         this._rpcRequest(\n    //           { method: \"eth_accounts\", params: [] },\n    //           NOOP,\n    //           true // indicating that eth_accounts _should_ update accounts\n    //         );\n    //       } catch (_) {\n    //         // Swallow error\n    //       }\n    //     }\n    //   }\n    //   if (\"selectedAddress\" in state && this.selectedAddress !== state.selectedAddress) {\n    //     try {\n    //       this._rpcRequest(\n    //         { method: \"eth_accounts\", params: [] },\n    //         NOOP,\n    //         true // indicating that eth_accounts _should_ update accounts\n    //       );\n    //     } catch (_) {\n    //       // Swallow error\n    //     }\n    //   }\n    //   // Emit chainChanged event on chain change\n    //   if (\"chainId\" in state && state.chainId !== this.chainId) {\n    //     this.chainId = state.chainId || null;\n    //     this.emit(\"chainChanged\", this.chainId);\n    //     // indicate that we've connected, for EIP-1193 compliance\n    //     // we do this here so that iframe can initialize\n    //     if (!this._state.hasEmittedConnection) {\n    //       this._handleConnect(this.chainId);\n    //       this._state.hasEmittedConnection = true;\n    //     }\n    //   }\n    //   // Emit networkChanged event on network change\n    //   if (\"networkVersion\" in state && state.networkVersion !== this.networkVersion) {\n    //     this.networkVersion = state.networkVersion || null;\n    //     this.emit(\"networkChanged\", this.networkVersion);\n    //   }\n    // });\n\n    pump(mux.createStream(\"publicConfig\"), storeAsStream(this._publicConfigStore), // RPC requests should still work if only this stream fails\n    logStreamDisconnectWarning.bind(this, \"MetaMask PublicConfigStore\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    }); // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine; // json rpc notification listener\n\n    jsonRpcConnection.events.on(\"notification\", payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === \"wallet_accountsChanged\") {\n        this._handleAccountsChanged(params);\n      } else if (method === \"wallet_unlockStateChanged\") {\n        this._handleUnlockStateChanged(params);\n      } else if (method === \"wallet_chainChanged\") {\n        this._handleChainChanged(params);\n      } else if (EMITTED_NOTIFICATIONS.includes(payload.method)) {\n        // EIP 1193 subscriptions, per eth-json-rpc-filters/subscriptionManager\n        this.emit(\"data\", payload); // deprecated\n\n        this.emit(\"notification\", params.result);\n        this.emit(\"message\", {\n          type: method,\n          data: params\n        });\n      } // Backward compatibility for older non EIP 1193 subscriptions\n      // this.emit('data', null, payload)\n\n    });\n  }\n\n  get publicConfigStore() {\n    if (!this._sentWarnings.publicConfigStore) {\n      log.warn(messages.warnings.publicConfigStore);\n      this._sentWarnings.publicConfigStore = true;\n    }\n\n    return this._publicConfigStore;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param args - The RPC request arguments.\n   * @returns A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param cb - The callback function.\n   */\n\n\n  sendAsync(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   *   addListener, on, once, prependListener, prependOnceListener\n   */\n\n\n  addListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.on(eventName, listener);\n  }\n\n  once(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependOnceListener(eventName, listener);\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked,\n        networkVersion\n      } = await this.request({\n        method: \"wallet_getProviderState\"\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId,\n        networkVersion\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The consumer's callback.\n   * @param isInternal - false - Whether the request is internal.\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"eth_accounts\" || _payload.method === \"eth_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"eth_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryPreopenHandle(_payload, cb);\n  }\n\n  send(methodOrPayload, callbackOrArgs) {\n    if (!this._sentWarnings.send) {\n      log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest({\n            method: methodOrPayload,\n            params: callbackOrArgs\n          }, getRpcPromiseCallback(resolve, reject, false));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n      return this._rpcRequest(methodOrPayload, callbackOrArgs);\n    }\n\n    return this._sendSync(methodOrPayload);\n  }\n  /**\n   * DEPRECATED.\n   * Internal backwards compatibility method, used in send.\n   */\n\n\n  _sendSync(payload) {\n    let result;\n\n    switch (payload.method) {\n      case \"eth_accounts\":\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case \"eth_coinbase\":\n        result = this.selectedAddress || null;\n        break;\n\n      case \"eth_uninstallFilter\":\n        this._rpcRequest(payload, NOOP);\n\n        result = true;\n        break;\n\n      case \"net_version\":\n        result = this.networkVersion || null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result\n    };\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits MetaMaskInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits MetaMaskInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits MetamaskInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"MetaMask: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"MetaMask: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before eth_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('MetaMask: \"eth_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits MetamaskInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId,\n      networkVersion\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId || !networkVersion) {\n      log.error(\"MetaMask: Received invalid network parameters. Please report this bug.\", {\n        chainId,\n        networkVersion\n      });\n      return;\n    }\n\n    if (networkVersion === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   */\n\n\n  _warnOfDeprecation(eventName) {\n    if (this._sentWarnings.events[eventName] === false) {\n      log.warn(messages.warnings.events[eventName]);\n      this._sentWarnings.events[eventName] = true;\n    }\n  }\n\n}\n\n_defineProperty(TorusInpageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\nconst defaults = options => ({\n  algorithms: options.algorithms || [\"sha256\"],\n  delimiter: options.delimiter || \" \",\n  full: options.full || false\n}); // Generate list of hashes\n\n\nconst hashes = (options, data) => {\n  const internalHashes = {};\n  options.algorithms.forEach(algorithm => {\n    internalHashes[algorithm] = createHash(algorithm).update(data, \"utf8\").digest(\"base64\");\n  });\n  return internalHashes;\n}; // Build an integrity string\n\n\nconst integrity = (options, sri) => {\n  let output = \"\"; // Hash list\n\n  output += Object.keys(sri.hashes).map(algorithm => \"\".concat(algorithm, \"-\").concat(sri.hashes[algorithm])).join(options.delimiter);\n  return output;\n};\n\nconst main = (options, data) => {\n  // Defaults\n  const finalOptions = defaults(options);\n  const sri = {\n    hashes: hashes(finalOptions, data),\n    integrity: undefined\n  };\n  sri.integrity = integrity(finalOptions, sri);\n  return finalOptions.full ? sri : sri.integrity;\n};\n\nclass PopupHandler extends EventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  const {\n    document\n  } = window; // Use the site's favicon if it exists\n\n  let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  } // Search through available icons in no particular order\n\n\n  icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  }\n\n  return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n/**\n * Sends site metadata over an RPC request.\n */\n\n\nasync function sendSiteMetadata(engine) {\n  try {\n    const domainMetadata = await getSiteMetadata(); // call engine.handle directly to avoid normal RPC request handling\n\n    engine.handle({\n      jsonrpc: \"2.0\",\n      id: getPreopenInstanceId(),\n      method: \"wallet_sendDomainMetadata\",\n      params: domainMetadata\n    }, NOOP);\n  } catch (error) {\n    log.error({\n      message: messages.errors.sendSiteMetadata(),\n      originalError: error\n    });\n  }\n}\n\nconst _excluded = [\"host\", \"chainId\", \"networkName\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst defaultVerifiers = {\n  [LOGIN_PROVIDER.GOOGLE]: true,\n  [LOGIN_PROVIDER.FACEBOOK]: true,\n  [LOGIN_PROVIDER.REDDIT]: true,\n  [LOGIN_PROVIDER.TWITCH]: true,\n  [LOGIN_PROVIDER.DISCORD]: true\n};\nconst iframeIntegrity = \"sha384-zFtyGD1XuBBFsoWsWz86WRRQIVjvJ09NSSfLCRwpEjER3OOdUm93Q9aVddcJz/Al\";\nconst expectedCacheControlHeader = \"max-age=3600\";\nconst UNSAFE_METHODS = [\"eth_sendTransaction\", \"eth_signTypedData\", \"eth_signTypedData_v3\", \"eth_signTypedData_v4\", \"personal_sign\", \"eth_getEncryptionPublicKey\", \"eth_decrypt\"];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\", {\n      check: false,\n      hash: iframeIntegrity,\n      version: \"\"\n    });\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/popup\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      modalZIndex = 99999,\n      apiKey = \"torus-default\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"buttonPosition\", BUTTON_POSITION.BOTTOM_LEFT);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    _defineProperty(this, \"isLoggedIn\", void 0);\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusWidgetVisibility\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"nodeDetailManager\", void 0);\n\n    _defineProperty(this, \"torusJs\", void 0);\n\n    _defineProperty(this, \"apiKey\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"isIframeFullScreen\", void 0);\n\n    _defineProperty(this, \"whiteLabel\", void 0);\n\n    _defineProperty(this, \"requestedVerifier\", void 0);\n\n    _defineProperty(this, \"currentVerifier\", void 0);\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"ethereum\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationMux\", void 0);\n\n    _defineProperty(this, \"isLoginCallback\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"paymentProviders\", configuration.paymentProviders);\n\n    _defineProperty(this, \"loginHint\", \"\");\n\n    _defineProperty(this, \"useWalletConnect\", void 0);\n\n    this.buttonPosition = buttonPosition;\n    this.torusUrl = \"\";\n    this.isLoggedIn = false; // ethereum.enable working\n\n    this.isInitialized = false; // init done\n\n    this.torusWidgetVisibility = true;\n    this.requestedVerifier = \"\";\n    this.currentVerifier = \"\";\n    this.nodeDetailManager = new NodeDetailManager();\n    this.torusJs = new TorusJs({\n      metadataHost: \"https://metadata.tor.us\",\n      allowHost: \"https://signer.tor.us/api/allow\"\n    });\n    this.apiKey = apiKey;\n    TorusJs.setAPIKey(apiKey);\n    setAPIKey(apiKey);\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.isIframeFullScreen = false;\n    this.dappStorageKey = \"\";\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      // deprecated: use loginConfig instead\n      enabledVerifiers = defaultVerifiers,\n      network = {\n        host: \"mainnet\",\n        chainId: null,\n        networkName: \"\",\n        blockExplorer: \"\",\n        ticker: \"\",\n        tickerName: \"\"\n      },\n      loginConfig = {},\n      showTorusButton = true,\n      integrity = {\n        check: false,\n        hash: iframeIntegrity,\n        version: \"\"\n      },\n      whiteLabel,\n      skipTKey = false,\n      useLocalStorage = false,\n      useWalletConnect = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv, integrity);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    this.whiteLabel = whiteLabel;\n    this.useWalletConnect = useWalletConnect;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    this.torusWidgetVisibility = showTorusButton;\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const localStorageKey = \"\".concat(configuration.localStorageKeyPrefix).concat(window.location.hostname);\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getPreopenInstanceId());\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"popup\";else torusIframeUrl.pathname += \"/popup\";\n\n    if (dappStorageKey) {\n      torusIframeUrl.hash = \"#dappStorageKey=\".concat(dappStorageKey);\n    } // Iframe code\n\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        allow=\".concat(useWalletConnect ? \"camera\" : \"\", \"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\").concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex, \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement('<div id=\"torusAlertContainer\"></div>');\n    this.torusAlertContainer.style.display = \"none\";\n    this.torusAlertContainer.style.setProperty(\"z-index\", this.alertZIndex.toString());\n    const link = window.document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    link.setAttribute(\"type\", \"text/css\");\n    link.setAttribute(\"href\", \"\".concat(torusUrl, \"/css/widget.css\"));\n    this.styleLink = link;\n    const {\n      defaultLanguage = getUserLanguage(),\n      customTranslations = {}\n    } = this.whiteLabel || {};\n    const mergedTranslations = deepmerge(configuration.translations, customTranslations);\n    const languageTranslations = mergedTranslations[defaultLanguage] || configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n\n    const handleSetup = async () => {\n      await documentReady();\n      return new Promise((resolve, reject) => {\n        this.torusIframe.onload = async () => {\n          // only do this if iframe is not full screen\n          this._setupWeb3();\n\n          const initStream = this.communicationMux.getStream(\"init_stream\");\n          initStream.on(\"data\", chunk => {\n            const {\n              name,\n              data,\n              error\n            } = chunk;\n\n            if (name === \"init_complete\" && data.success) {\n              // resolve promise\n              this.isInitialized = true;\n\n              this._displayIframe(this.isIframeFullScreen);\n\n              resolve(undefined);\n            } else if (error) {\n              reject(new Error(error));\n            }\n          });\n          initStream.write({\n            name: \"init_stream\",\n            data: {\n              enabledVerifiers,\n              loginConfig,\n              whiteLabel: this.whiteLabel,\n              buttonPosition: this.buttonPosition,\n              torusWidgetVisibility: this.torusWidgetVisibility,\n              apiKey: this.apiKey,\n              skipTKey,\n              network\n            }\n          });\n        };\n\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      });\n    };\n\n    if (buildEnv === \"production\" && integrity.check) {\n      // hacky solution to check for iframe integrity\n      const fetchUrl = \"\".concat(torusUrl, \"/popup\");\n      const resp = await fetch(fetchUrl, {\n        cache: \"reload\"\n      });\n\n      if (resp.headers.get(\"Cache-Control\") !== expectedCacheControlHeader) {\n        throw new Error(\"Unexpected Cache-Control headers, got \".concat(resp.headers.get(\"Cache-Control\")));\n      }\n\n      const response = await resp.text();\n      const calculatedIntegrity = main({\n        algorithms: [\"sha384\"]\n      }, response);\n      log.info(calculatedIntegrity, \"integrity\");\n\n      if (calculatedIntegrity === integrity.hash) {\n        await handleSetup();\n      } else {\n        this.clearInit();\n        throw new Error(\"Integrity check failed\");\n      }\n    } else {\n      await handleSetup();\n    }\n\n    return undefined;\n  }\n\n  login() {\n    let {\n      verifier = \"\",\n      login_hint: loginHint = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    this.requestedVerifier = verifier;\n    this.loginHint = loginHint;\n    return this.ethereum.enable();\n  }\n\n  logout() {\n    return new Promise((resolve, reject) => {\n      if (!this.isLoggedIn) {\n        reject(new Error(\"User has not logged in yet\"));\n        return;\n      }\n\n      const logOutStream = this.communicationMux.getStream(\"logout\");\n      logOutStream.write({\n        name: \"logOut\"\n      });\n      const statusStream = this.communicationMux.getStream(\"status\");\n\n      const statusStreamHandler = status => {\n        if (!status.loggedIn) {\n          this.isLoggedIn = false;\n          this.currentVerifier = \"\";\n          this.requestedVerifier = \"\";\n          resolve();\n        } else reject(new Error(\"Some Error Occured\"));\n      };\n\n      handleStream(statusStream, \"data\", statusStreamHandler);\n    });\n  }\n\n  async cleanUp() {\n    if (this.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof HTMLDocument;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.torusWidgetVisibility = false;\n\n    this._sendWidgetVisibilityStatus(false);\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this.torusWidgetVisibility = true;\n\n    this._sendWidgetVisibilityStatus(true);\n\n    this._displayIframe();\n  }\n\n  setProvider() {\n    let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let {\n      host = \"mainnet\",\n      chainId = null,\n      networkName = \"\"\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return new Promise((resolve, reject) => {\n      const providerChangeStream = this.communicationMux.getStream(\"provider_change\");\n\n      const handler = chunk => {\n        const {\n          err,\n          success\n        } = chunk.data;\n        log.info(chunk);\n\n        if (err) {\n          reject(err);\n        } else if (success) {\n          resolve();\n        } else reject(new Error(\"some error occured\"));\n      };\n\n      handleStream(providerChangeStream, \"data\", handler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId, {\n        target: \"_blank\",\n        features: FEATURES_PROVIDER_CHANGE_WINDOW\n      });\n\n      providerChangeStream.write({\n        name: \"show_provider_change\",\n        data: {\n          network: _objectSpread({\n            host,\n            chainId,\n            networkName\n          }, rest),\n          preopenInstanceId,\n          override: false\n        }\n      });\n    });\n  }\n\n  showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const showWalletStream = this.communicationMux.getStream(\"show_wallet\");\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    showWalletStream.write({\n      name: \"show_wallet\",\n      data: {\n        path: finalPath\n      }\n    });\n\n    const showWalletHandler = chunk => {\n      if (chunk.name === \"show_wallet_instance\") {\n        // Let the error propogate up (hence, no try catch)\n        const {\n          instanceId\n        } = chunk.data;\n        const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n        finalUrl.searchParams.append(\"integrity\", \"true\");\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach(x => {\n          finalUrl.searchParams.append(x, params[x]);\n        });\n\n        if (this.dappStorageKey) {\n          finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n        }\n\n        const walletWindow = new PopupHandler({\n          url: finalUrl,\n          features: FEATURES_DEFAULT_WALLET_WINDOW\n        });\n        walletWindow.open();\n      }\n    };\n\n    handleStream(showWalletStream, \"data\", showWalletHandler);\n  }\n\n  async getPublicAddress(_ref2) {\n    let {\n      verifier,\n      verifierId,\n      isExtended = false\n    } = _ref2;\n    if (!configuration.supportedVerifierList.includes(verifier) || !WALLET_OPENLOGIN_VERIFIER_MAP[verifier]) throw new Error(\"Unsupported verifier\");\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({\n      verifier,\n      verifierId\n    });\n    const endpoints = nodeDetails.torusNodeEndpoints;\n    const torusNodePubs = nodeDetails.torusNodePub;\n    const walletVerifier = verifier;\n    const openloginVerifier = WALLET_OPENLOGIN_VERIFIER_MAP[verifier];\n\n    try {\n      const existingV1User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: walletVerifier,\n        verifierId\n      });\n\n      if (existingV1User.typeOfUser === \"v1\") {\n        if (!isExtended) return existingV1User.address;\n        return existingV1User;\n      } // we don't support v2 users with v1 verifiers so get or assign the key for v2 user on v2 `verifier`\n\n\n      const v2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: openloginVerifier,\n        verifierId\n      }, true);\n      if (!isExtended) return v2User.address;\n      return v2User;\n    } catch (error) {\n      if (error !== null && error !== void 0 && error.message.includes(\"Verifier + VerifierID has not yet been assigned\")) {\n        // if user doesn't have key then assign it with v2 verifier\n        const newV2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n          verifier: openloginVerifier,\n          verifierId\n        }, true);\n        if (!isExtended) return newV2User.address;\n        return newV2User;\n      }\n\n      throw error;\n    }\n  }\n\n  getUserInfo(message) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const userInfoAccessStream = this.communicationMux.getStream(\"user_info_access\");\n        userInfoAccessStream.write({\n          name: \"user_info_access_request\"\n        });\n\n        const userInfoAccessHandler = chunk => {\n          const {\n            name,\n            data: {\n              approved,\n              payload,\n              rejected,\n              newRequest\n            }\n          } = chunk;\n\n          if (name === \"user_info_access_response\") {\n            if (approved) {\n              resolve(payload);\n            } else if (rejected) {\n              reject(new Error(\"User rejected the request\"));\n            } else if (newRequest) {\n              const userInfoStream = this.communicationMux.getStream(\"user_info\");\n\n              const userInfoHandler = handlerChunk => {\n                if (handlerChunk.name === \"user_info_response\") {\n                  if (handlerChunk.data.approved) {\n                    resolve(handlerChunk.data.payload);\n                  } else {\n                    reject(new Error(\"User rejected the request\"));\n                  }\n                }\n              };\n\n              handleStream(userInfoStream, \"data\", userInfoHandler);\n              const preopenInstanceId = getPreopenInstanceId();\n\n              this._handleWindow(preopenInstanceId, {\n                target: \"_blank\",\n                features: FEATURES_PROVIDER_CHANGE_WINDOW\n              });\n\n              userInfoStream.write({\n                name: \"user_info_request\",\n                data: {\n                  message,\n                  preopenInstanceId\n                }\n              });\n            }\n          }\n        };\n\n        handleStream(userInfoAccessStream, \"data\", userInfoAccessHandler);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  initiateTopup(provider, params) {\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        const {\n          errors,\n          isValid\n        } = validatePaymentProvider(provider, params);\n\n        if (!isValid) {\n          reject(new Error(JSON.stringify(errors)));\n          return;\n        }\n\n        const topupStream = this.communicationMux.getStream(\"topup\");\n\n        const topupHandler = chunk => {\n          if (chunk.name === \"topup_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(topupStream, \"data\", topupHandler);\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId);\n\n        topupStream.write({\n          name: \"topup_request\",\n          data: {\n            provider,\n            params,\n            preopenInstanceId\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        if (Buffer.from(privateKey, \"hex\").length !== 32) {\n          reject(new Error(\"Invalid private key, Please provide a 32 byte valid secp25k1 private key\"));\n          return;\n        }\n\n        const loginPrivKeyStream = this.communicationMux.getStream(\"login_with_private_key\");\n\n        const loginHandler = chunk => {\n          if (chunk.name === \"login_with_private_key_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(loginPrivKeyStream, \"data\", loginHandler);\n        loginPrivKeyStream.write({\n          name: \"login_with_private_key_request\",\n          data: {\n            privateKey,\n            userInfo\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async showWalletConnectScanner() {\n    if (!this.useWalletConnect) throw new Error(\"Set `useWalletConnect` as true in init function options to use wallet connect scanner\");\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const walletConnectStream = this.communicationMux.getStream(\"wallet_connect_stream\");\n\n        const walletConnectHandler = chunk => {\n          if (chunk.name === \"wallet_connect_stream_res\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n\n            this._displayIframe();\n          }\n        };\n\n        handleStream(walletConnectStream, \"data\", walletConnectHandler);\n        walletConnectStream.write({\n          name: \"wallet_connect_stream_req\"\n        });\n\n        this._displayIframe(true);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  _handleWindow(preopenInstanceId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (preopenInstanceId) {\n      const windowStream = this.communicationMux.getStream(\"window\");\n      const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?preopenInstanceId=\").concat(preopenInstanceId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      const handledWindow = new PopupHandler({\n        url: finalUrl,\n        target,\n        features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(preopenInstanceId, finalUrl.href);\n\n        return;\n      }\n\n      windowStream.write({\n        name: \"opened_window\",\n        data: {\n          preopenInstanceId\n        }\n      });\n\n      const closeHandler = _ref3 => {\n        let {\n          preopenInstanceId: receivedId,\n          close\n        } = _ref3;\n\n        if (receivedId === preopenInstanceId && close) {\n          handledWindow.close();\n          windowStream.removeListener(\"data\", closeHandler);\n        }\n      };\n\n      windowStream.on(\"data\", closeHandler);\n      handledWindow.once(\"close\", () => {\n        windowStream.write({\n          data: {\n            preopenInstanceId,\n            closed: true\n          }\n        });\n        windowStream.removeListener(\"data\", closeHandler);\n      });\n    }\n  }\n\n  _setEmbedWhiteLabel(element) {\n    // Set whitelabel\n    const {\n      theme\n    } = this.whiteLabel || {};\n\n    if (theme) {\n      const {\n        isDark = false,\n        colors = {}\n      } = theme;\n      if (isDark) element.classList.add(\"torus-dark\");\n      if (colors.torusBrand1) element.style.setProperty(\"--torus-brand-1\", colors.torusBrand1);\n      if (colors.torusGray2) element.style.setProperty(\"--torus-gray-2\", colors.torusGray2);\n    }\n  }\n\n  _getLogoUrl() {\n    var _this$whiteLabel, _this$whiteLabel$them;\n\n    let logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n\n    if ((_this$whiteLabel = this.whiteLabel) !== null && _this$whiteLabel !== void 0 && (_this$whiteLabel$them = _this$whiteLabel.theme) !== null && _this$whiteLabel$them !== void 0 && _this$whiteLabel$them.isDark) {\n      var _this$whiteLabel2;\n\n      logoUrl = ((_this$whiteLabel2 = this.whiteLabel) === null || _this$whiteLabel2 === void 0 ? void 0 : _this$whiteLabel2.logoLight) || logoUrl;\n    } else {\n      var _this$whiteLabel3;\n\n      logoUrl = ((_this$whiteLabel3 = this.whiteLabel) === null || _this$whiteLabel3 === void 0 ? void 0 : _this$whiteLabel3.logoDark) || logoUrl;\n    }\n\n    return logoUrl;\n  }\n\n  _sendWidgetVisibilityStatus(status) {\n    const torusWidgetVisibilityStream = this.communicationMux.getStream(\"torus-widget-visibility\");\n    torusWidgetVisibilityStream.write({\n      data: status\n    });\n  }\n\n  _displayIframe() {\n    let isFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this.isIframeFullScreen = isFull;\n  }\n\n  _setupWeb3() {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const metamaskStream = new BasePostMessageStream({\n      name: \"embed_metamask\",\n      target: \"iframe_metamask\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Due to compatibility reasons, we should not set up multiplexing on window.metamaskstream\n    // because the MetamaskInpageProvider also attempts to do so.\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_comm\",\n      target: \"iframe_comm\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Backward compatibility with Gotchi :)\n    // window.metamaskStream = this.communicationStream\n    // compose the inpage provider\n\n    const inpageProvider = new TorusInpageProvider(metamaskStream); // detect eth_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inpageProvider[m];\n\n      inpageProvider[m] = function providerFunc(method) {\n        if (method && method === \"eth_requestAccounts\") {\n          return inpageProvider.enable();\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return originalMethod.apply(this, [method, ...args]);\n      };\n    };\n\n    detectAccountRequestPrototypeModifier(\"send\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n\n    inpageProvider.enable = () => {\n      return new Promise((resolve, reject) => {\n        // If user is already logged in, we assume they have given access to the website\n        inpageProvider.sendAsync({\n          jsonrpc: \"2.0\",\n          id: getPreopenInstanceId(),\n          method: \"eth_requestAccounts\",\n          params: []\n        }, (err, response) => {\n          const {\n            result: res\n          } = response || {};\n\n          if (err) {\n            setTimeout(() => {\n              reject(err);\n            }, 50);\n          } else if (Array.isArray(res) && res.length > 0) {\n            // If user is already rehydrated, resolve this\n            // else wait for something to be written to status stream\n            const handleLoginCb = () => {\n              if (this.requestedVerifier !== \"\" && this.currentVerifier !== this.requestedVerifier) {\n                const {\n                  requestedVerifier\n                } = this; // eslint-disable-next-line promise/no-promise-in-callback\n\n                this.logout() // eslint-disable-next-line promise/always-return\n                .then(_ => {\n                  this.requestedVerifier = requestedVerifier;\n\n                  this._showLoginPopup(true, resolve, reject);\n                }).catch(error => reject(error));\n              } else {\n                resolve(res);\n              }\n            };\n\n            if (this.isLoggedIn) {\n              handleLoginCb();\n            } else {\n              this.isLoginCallback = handleLoginCb;\n            }\n          } else {\n            // set up listener for login\n            this._showLoginPopup(true, resolve, reject);\n          }\n        });\n      });\n    };\n\n    inpageProvider.tryPreopenHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && UNSAFE_METHODS.includes(_payload.method)) {\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId, {\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        _payload.preopenInstanceId = preopenInstanceId;\n      }\n\n      inpageProvider._rpcEngine.handle(_payload, cb);\n    }; // Work around for web3@1.0 deleting the bound `sendAsync` but not the unbound\n    // `sendAsync` method on the prototype, causing `this` reference issues with drizzle\n\n\n    const proxiedInpageProvider = new Proxy(inpageProvider, {\n      // straight up lie that we deleted the property so that it doesnt\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.ethereum = proxiedInpageProvider;\n    const communicationMux = setupMultiplex(communicationStream);\n    this.communicationMux = communicationMux;\n    const windowStream = communicationMux.getStream(\"window\");\n    windowStream.on(\"data\", chunk => {\n      if (chunk.name === \"create_window\") {\n        // url is the url we need to open\n        // we can pass the final url upfront so that it removes the step of redirecting to /redirect and waiting for finalUrl\n        this._createPopupBlockAlert(chunk.data.preopenInstanceId, chunk.data.url);\n      }\n    }); // show torus widget if button clicked\n\n    const widgetStream = communicationMux.getStream(\"widget\");\n    widgetStream.on(\"data\", chunk => {\n      const {\n        data\n      } = chunk;\n\n      this._displayIframe(data);\n    }); // Show torus button if wallet has been hydrated/detected\n\n    const statusStream = communicationMux.getStream(\"status\");\n    statusStream.on(\"data\", status => {\n      // login\n      if (status.loggedIn) {\n        this.isLoggedIn = status.loggedIn;\n        this.currentVerifier = status.verifier;\n      } // logout\n      else this._displayIframe();\n\n      if (this.isLoginCallback) {\n        this.isLoginCallback();\n        delete this.isLoginCallback;\n      }\n    });\n    this.provider = proxiedInpageProvider;\n    if (this.provider.shouldSendMetadata) sendSiteMetadata(this.provider._rpcEngine);\n\n    inpageProvider._initializeState();\n\n    log.debug(\"Torus - injected provider\");\n  }\n\n  _showLoginPopup(calledFromEmbed, resolve, reject) {\n    const loginHandler = data => {\n      const {\n        err,\n        selectedAddress\n      } = data;\n\n      if (err) {\n        log.error(err);\n        if (reject) reject(err);\n      } // returns an array (cause accounts expects it)\n      else if (resolve) resolve([selectedAddress]);\n\n      if (this.isIframeFullScreen) this._displayIframe();\n    };\n\n    const oauthStream = this.communicationMux.getStream(\"oauth\");\n\n    if (!this.requestedVerifier) {\n      this._displayIframe(true);\n\n      handleStream(oauthStream, \"data\", loginHandler);\n      oauthStream.write({\n        name: \"oauth_modal\",\n        data: {\n          calledFromEmbed\n        }\n      });\n    } else {\n      handleStream(oauthStream, \"data\", loginHandler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId);\n\n      oauthStream.write({\n        name: \"oauth\",\n        data: {\n          calledFromEmbed,\n          verifier: this.requestedVerifier,\n          preopenInstanceId,\n          login_hint: this.loginHint\n        }\n      });\n    }\n  }\n\n  _createPopupBlockAlert(preopenInstanceId, url) {\n    const logoUrl = this._getLogoUrl();\n\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(preopenInstanceId, {\n          url,\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    this._setEmbedWhiteLabel(torusAlert);\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.style.display = \"block\";\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    runOnLoad(attachOnLoad);\n    runOnLoad(bindOnLoad);\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInpageProvider, WALLET_OPENLOGIN_VERIFIER_MAP, Torus as default };","map":{"version":3,"sources":["../src/interfaces.ts","../src/config.ts","../src/embedUtils.ts","../src/loglevel.ts","../src/messages.ts","../src/utils.ts","../src/inpage-provider.ts","../src/integrity.ts","../src/PopupHandler.ts","../src/siteMetadata.ts","../src/embed.ts"],"names":["LOGIN_PROVIDER","GOOGLE","FACEBOOK","TWITCH","REDDIT","DISCORD","WALLET_OPENLOGIN_VERIFIER_MAP","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","BINANCE","TESTING","LRC","BETA","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","paymentProviders","line1","line2","line3","supportPage","minOrderValue","maxOrderValue","validCurrencies","validCryptoCurrencies","includeFees","enforceMax","sell","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKeyPrefix","runOnLoad","fn","window","Promise","htmlToElement","html","template","trimmedHtml","handleEvent","handlerArgs","handlerWrapper","handler","handle","handleStream","chunk","resolve","document","loglevel","errors","disconnected","permanentlyDisconnected","sendSiteMetadata","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","shouldSendMetadata","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","enableDeprecation","sendDeprecation","events","close","data","networkChanged","notification","publicConfigStore","validatePaymentProvider","isValid","provider","Object","selectedProvider","selectedParams","params","requestedOrderAmount","parseFloat","createErrorMiddleware","req","res","message","next","done","error","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","getPreopenInstanceId","Math","getTorusUrl","logLevel","version","versionUsed","integrity","buildEnv","config","get","useAPIKey","response","torusUrl","getUserLanguage","userLanguage","userLanguages","EMITTED_NOTIFICATIONS","NOOP","FEATURES_PROVIDER_CHANGE_WINDOW","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_CONFIRM_WINDOW","storage","x","e","getPopupFeatures","dualScreenLeft","dualScreenTop","w","h","width","height","systemZoom","left","top","features","SafeEventEmitter","getRpcPromiseCallback","unwrapResult","reject","Array","TorusInpageProvider","accounts","isConnected","isUnlocked","initialized","isPermanentlyDisconnected","hasEmittedConnection","enable","experimentalMethods","send","constructor","jsonRpcStreamName","isDuplexStream","messages","isTorus","selectedAddress","networkVersion","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_sendSync","_rpcRequest","_warnOfDeprecation","_initializeState","request","sendAsync","mux","pump","storageKey","storeAsStream","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","payload","emit","type","args","addListener","on","once","prependListener","prependOnceListener","isInternal","cb","_payload","callback","callbackOrArgs","methodOrPayload","result","id","jsonrpc","errorMessage","isEthAccounts","finalAccounts","dequal","defaults","options","algorithms","delimiter","full","hashes","internalHashes","algorithm","createHash","output","sri","main","finalOptions","undefined","url","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","clearInterval","open","redirect","img","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","name","getSiteIcon","domainMetadata","engine","originalError","defaultVerifiers","iframeIntegrity","expectedCacheControlHeader","UNSAFE_METHODS","isLocalStorageAvailable","storageAvailable","torusIframeHtml","check","hash","configuration","buttonPosition","modalZIndex","apiKey","torusWidgetVisibility","requestedVerifier","currentVerifier","metadataHost","allowHost","TorusJs","setAPIKey","isIframeFullScreen","dappStorageKey","init","enableLogging","enabledVerifiers","network","host","networkName","blockExplorer","ticker","tickerName","loginConfig","showTorusButton","skipTKey","useLocalStorage","useWalletConnect","whiteLabel","localStorageKey","storedKey","generatedKey","torusIframeUrl","link","styleLink","defaultLanguage","customTranslations","mergedTranslations","deepmerge","languageTranslations","handleSetup","documentReady","initStream","isInitialized","_displayIframe","fetchUrl","resp","fetch","cache","calculatedIntegrity","generateIntegrity","login","verifier","login_hint","loginHint","logout","logOutStream","statusStream","statusStreamHandler","status","isLoggedIn","cleanUp","clearInit","isElement","element","torusIframe","torusAlert","torusAlertContainer","hideTorusButton","_sendWidgetVisibilityStatus","setProvider","rest","providerChangeStream","success","preopenInstanceId","_handleWindow","override","showWallet","showWalletStream","finalPath","path","showWalletHandler","instanceId","finalUrl","walletWindow","getPublicAddress","isExtended","nodeDetails","verifierId","endpoints","torusNodePubs","walletVerifier","openloginVerifier","existingV1User","v2User","newV2User","getUserInfo","userInfoAccessStream","userInfoAccessHandler","newRequest","userInfoStream","userInfoHandler","handlerChunk","initiateTopup","JSON","topupStream","topupHandler","loginWithPrivateKey","userInfo","Buffer","loginPrivKeyStream","loginHandler","showWalletConnectScanner","walletConnectStream","walletConnectHandler","windowStream","handledWindow","closeHandler","receivedId","closed","_setEmbedWhiteLabel","theme","isDark","colors","_getLogoUrl","logoUrl","logoLight","logoDark","torusWidgetVisibilityStream","isFull","style","_setupWeb3","metamaskStream","targetWindow","targetOrigin","origin","communicationStream","inpageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","setTimeout","handleLoginCb","_","isLoginCallback","proxiedInpageProvider","deleteProperty","ethereum","communicationMux","setupMultiplex","widgetStream","_showLoginPopup","oauthStream","calledFromEmbed","_createPopupBlockAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport NodeDetailManager from '@toruslabs/fetch-node-details';\nimport { get, setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, BasePostMessageStream, setupMultiplex } from '@toruslabs/openlogin-jrpc';\nimport TorusJs from '@toruslabs/torus.js';\nimport deepmerge from 'lodash.merge';\nimport { ObservableStore, storeAsStream } from '@metamask/obs-store';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport dequal from 'fast-deep-equal';\nimport { duplex } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport createHash from 'create-hash';\nimport { EventEmitter } from 'events';\n\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  TWITCH: \"twitch\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\"\n};\nconst WALLET_OPENLOGIN_VERIFIER_MAP = {\n  [LOGIN_PROVIDER.GOOGLE]: \"tkey-google\",\n  [LOGIN_PROVIDER.FACEBOOK]: \"tkey-facebook\",\n  [LOGIN_PROVIDER.TWITCH]: \"tkey-twitch\",\n  [LOGIN_PROVIDER.REDDIT]: \"tkey-reddit\",\n  [LOGIN_PROVIDER.DISCORD]: \"tkey-discord\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  BINANCE: \"binance\",\n  TESTING: \"testing\",\n  LRC: \"lrc\",\n  BETA: \"beta\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\n\nconst paymentProviders$1 = {\n  [PAYMENT_PROVIDER.RAMPNETWORK]: {\n    line1: \"Debit Card/ Apple Pay/ Bank transfer\",\n    line2: \"0.49% - 2.9%\",\n    line3: \"5,000€/purchase, 20,000€/mo\",\n    supportPage: \"https://instant.ramp.network/\",\n    minOrderValue: 50,\n    maxOrderValue: 20000,\n    validCurrencies: [\"GBP\", \"EUR\", \"USD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"BSC_BNB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MOONPAY]: {\n    line1: \"Credit / Debit Card / Apple Pay\",\n    line2: \"4.5% or 5 USD\",\n    line3: \"2,000€/day, 10,000€/mo\",\n    supportPage: \"https://help.moonpay.io/en/\",\n    minOrderValue: 24.99,\n    maxOrderValue: 50000,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\", \"RUB\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"TUSD\", \"USDC\", \"USDT\", \"BNB_BSC\", \"BUSD_BSC\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.WYRE]: {\n    line1: \"Apple Pay/ Debit/ Credit Card\",\n    line2: \"4.9% + 30¢ or 5 USD\",\n    line3: \"$250/day\",\n    supportPage: \"https://support.sendwyre.com/en/\",\n    minOrderValue: 5,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"AUD\", \"CAD\", \"GBP\", \"EUR\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: false,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.XANPOOL]: {\n    line1: \"PayNow/ InstaPay/ FPS/ GoJekPay/ UPI/ PromptPay/ VietelPay/ DuitNow\",\n    line2: \"2.5% buying, 3% selling\",\n    line3: \"$2,500 / day\",\n    supportPage: \"mailto:support@xanpool.com\",\n    minOrderValue: 100,\n    maxOrderValue: 2500,\n    validCurrencies: [\"SGD\", \"HKD\", \"MYR\", \"PHP\", \"INR\", \"VND\", \"THB\", \"IDR\"],\n    validCryptoCurrencies: [\"ETH\", \"USDT\"],\n    includeFees: true,\n    sell: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.MERCURYO]: {\n    line1: \"Credit/ Debit Card/ Apple Pay\",\n    line2: \"3.95% or 4 USD\",\n    line3: \"10,000€/day, 25,000€/mo\",\n    supportPage: \"mailto:support@mercuryo.io\",\n    minOrderValue: 30,\n    maxOrderValue: 5000,\n    validCurrencies: [\"USD\", \"EUR\", \"RUB\", \"TRY\", \"GBP\", \"UAH\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"BAT\", \"USDT\", \"OKB\"],\n    includeFees: true,\n    enforceMax: false\n  },\n  [PAYMENT_PROVIDER.TRANSAK]: {\n    line1: \"Credit/ Debit Card/ <br/>Bank Transfer (sepa/gbp)\",\n    line2: \"0.99% - 5.5% or 5 USD\",\n    line3: \"500€/day\",\n    supportPage: \"https://support.transak.com/hc/en-US\",\n    minOrderValue: 20,\n    maxOrderValue: 500,\n    validCurrencies: [\"USD\", \"EUR\", \"GBP\", \"AUD\", \"CAD\", \"SGD\"],\n    validCryptoCurrencies: [\"ETH\", \"DAI\", \"USDC\", \"USDT\"],\n    includeFees: true,\n    enforceMax: false\n  }\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  paymentProviders: paymentProviders$1,\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: \"torus-\"\n};\n\nconst runOnLoad = fn => new Promise((resolve, reject) => {\n  if (window.document.body != null) {\n    Promise.resolve(fn()).then(resolve).catch(reject);\n  } else {\n    window.document.addEventListener(\"DOMContentLoaded\", () => {\n      Promise.resolve(fn()).then(resolve).catch(reject);\n    });\n  }\n});\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nconst handleStream = (handle, eventName, handler) => {\n  const handlerWrapper = chunk => {\n    handler(chunk);\n    handle.removeListener(eventName, handlerWrapper);\n  };\n\n  handle.on(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nvar log = loglevel.getLogger(\"torus-embed\");\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    sendSiteMetadata: () => \"Torus: Failed to send site metadata. This is an internal error, please report this bug.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners, shouldSendMetadata) => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \", shouldSendMetadata: \").concat(shouldSendMetadata, \" }\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {\n    // deprecated methods\n    enableDeprecation: 'Torus: \"\"ethereum.enable()\" is deprecated and may be removed in the future. ' + 'Please use \"ethereum.send(\"eth_requestAccounts\")\" instead. For more information, see: https://eips.ethereum.org/EIPS/eip-1102',\n    sendDeprecation: 'Torus: \"ethereum.send(...)\" is deprecated and may be removed in the future.' + ' Please use \"ethereum.sendAsync(...)\" or \"ethereum.request(...)\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n    events: {\n      close: 'Torus: The event \"close\" is deprecated and may be removed in the future. Please use \"disconnect\" instead.' + \"\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",\n      data: 'Torus: The event \"data\" is deprecated and will be removed in the future.' + 'Use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message',\n      networkChanged: 'Torus: The event \"networkChanged\" is deprecated and may be removed in the future.' + ' Please use \"chainChanged\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193',\n      notification: 'Torus: The event \"notification\" is deprecated and may be removed in the future. ' + 'Please use \"message\" instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193'\n    },\n    publicConfigStore: 'Torus: The property \"publicConfigStore\" is deprecated and WILL be removed in the future.'\n  }\n};\n\nconst {\n  paymentProviders\n} = configuration;\nconst validatePaymentProvider = (provider, params) => {\n  const errors = {};\n\n  if (!provider) {\n    return {\n      errors,\n      isValid: true\n    };\n  }\n\n  if (provider && !paymentProviders[provider]) {\n    errors.provider = \"Invalid Provider\";\n    return {\n      errors,\n      isValid: Object.keys(errors).length === 0\n    };\n  }\n\n  const selectedProvider = paymentProviders[provider];\n  const selectedParams = params || {}; // set default values\n  // if (!selectedParams.selectedCurrency) [selectedParams.selectedCurrency] = selectedProvider.validCurrencies\n  // if (!selectedParams.fiatValue) selectedParams.fiatValue = selectedProvider.minOrderValue\n  // if (!selectedParams.selectedCryptoCurrency) [selectedParams.selectedCryptoCurrency] = selectedProvider.validCryptoCurrencies\n  // validations\n\n  if (selectedParams.fiatValue) {\n    const requestedOrderAmount = +parseFloat(selectedParams.fiatValue.toString()) || 0;\n    if (requestedOrderAmount < selectedProvider.minOrderValue) errors.fiatValue = \"Requested amount is lower than supported\";\n    if (requestedOrderAmount > selectedProvider.maxOrderValue && selectedProvider.enforceMax) errors.fiatValue = \"Requested amount is higher than supported\";\n  }\n\n  if (selectedParams.selectedCurrency && !selectedProvider.validCurrencies.includes(selectedParams.selectedCurrency)) {\n    errors.selectedCurrency = \"Unsupported currency\";\n  }\n\n  if (selectedParams.selectedCryptoCurrency && !selectedProvider.validCryptoCurrencies.includes(selectedParams.selectedCryptoCurrency)) {\n    errors.selectedCryptoCurrency = \"Unsupported cryptoCurrency\";\n  }\n\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n}; // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"MetaMask - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n} // resolve response.result or response, reject errors\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"MetaMask: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getPreopenInstanceId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv, integrity) => {\n  let torusUrl;\n  let logLevel; // Do not change this line\n\n  const version = \"1.22.2\";\n  let versionUsed = integrity.version || version;\n\n  try {\n    if ((buildEnv === \"binance\" || buildEnv === \"production\") && !integrity.version) {\n      let response;\n      if (!configuration.prodTorusUrl) response = await get(\"\".concat(configuration.api, \"/latestversion?name=@toruslabs/torus-embed&version=\").concat(version), {}, {\n        useAPIKey: true\n      });else response = {\n        data: configuration.prodTorusUrl\n      };\n      versionUsed = response.data; // eslint-disable-next-line require-atomic-updates\n\n      configuration.prodTorusUrl = response.data;\n    }\n  } catch (error) {\n    log.error(error, \"unable to fetch latest version\");\n  }\n\n  log.info(\"version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"binance\":\n      torusUrl = \"https://binance.tor.us/v\".concat(versionUsed);\n      logLevel = \"info\";\n      break;\n\n    case \"testing\":\n      torusUrl = \"https://testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"lrc\":\n      torusUrl = \"https://lrc.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"beta\":\n      torusUrl = \"https://beta.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:4050\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://app.tor.us/v\".concat(versionUsed);\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst EMITTED_NOTIFICATIONS = [\"eth_subscription\" // per eth-json-rpc-filters/subscriptionManager\n];\nconst NOOP = () => {// empty function\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=660,width=375\";\nconst FEATURES_DEFAULT_WALLET_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=740,width=1315\";\nconst FEATURES_CONFIRM_WINDOW = \"directories=0,titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=700,width=450\";\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\nfunction getPopupFeatures() {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const w = 1200;\n  const h = 700;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nSafeEventEmitter.defaultMaxListeners = 100; // resolve response.result, reject errors\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      return reject(error || response.error);\n    }\n\n    return !unwrapResult || Array.isArray(response) ? resolve(response) : resolve(response.result);\n  };\n};\n\nclass TorusInpageProvider extends SafeEventEmitter {\n  /**\n   * The chain ID of the currently connected Ethereum chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Ethereum address.\n   * If null, MetaMask is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n\n  /**\n   * Indicating that this provider is a MetaMask provider.\n   */\n  constructor(connectionStream) {\n    let {\n      maxEventListeners = 100,\n      shouldSendMetadata = true,\n      jsonRpcStreamName = \"provider\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"networkVersion\", void 0);\n\n    _defineProperty(this, \"shouldSendMetadata\", void 0);\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_publicConfigStore\", void 0);\n\n    _defineProperty(this, \"tryPreopenHandle\", void 0);\n\n    _defineProperty(this, \"enable\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"_jsonRpcConnection\", void 0);\n\n    _defineProperty(this, \"_sentWarnings\", {\n      // methods\n      enable: false,\n      experimentalMethods: false,\n      send: false,\n      publicConfigStore: false,\n      // events\n      events: {\n        close: false,\n        data: false,\n        networkChanged: false,\n        notification: false\n      }\n    });\n\n    if (!duplex(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners); // private state\n\n    this._state = _objectSpread$1({}, TorusInpageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.networkVersion = null;\n    this.chainId = null;\n    this.shouldSendMetadata = shouldSendMetadata; // bind functions (to prevent e.g. web3@1.x from making unbound calls)\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._sendSync = this._sendSync.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._warnOfDeprecation = this._warnOfDeprecation.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"MetaMask\")); // subscribe to metamask public config (one-way)\n\n    this._publicConfigStore = new ObservableStore({\n      storageKey: \"Metamask-Config\"\n    }); // handle isUnlocked changes, and chainChanged and networkChanged events\n    // this._publicConfigStore.subscribe((stringifiedState) => {\n    //   // This is because we are using store as string\n    //   const state = JSON.parse(stringifiedState as unknown as string);\n    //   if (\"isUnlocked\" in state && state.isUnlocked !== this._state.isUnlocked) {\n    //     this._state.isUnlocked = state.isUnlocked;\n    //     if (!this._state.isUnlocked) {\n    //       // accounts are never exposed when the extension is locked\n    //       this._handleAccountsChanged([]);\n    //     } else {\n    //       // this will get the exposed accounts, if any\n    //       try {\n    //         this._rpcRequest(\n    //           { method: \"eth_accounts\", params: [] },\n    //           NOOP,\n    //           true // indicating that eth_accounts _should_ update accounts\n    //         );\n    //       } catch (_) {\n    //         // Swallow error\n    //       }\n    //     }\n    //   }\n    //   if (\"selectedAddress\" in state && this.selectedAddress !== state.selectedAddress) {\n    //     try {\n    //       this._rpcRequest(\n    //         { method: \"eth_accounts\", params: [] },\n    //         NOOP,\n    //         true // indicating that eth_accounts _should_ update accounts\n    //       );\n    //     } catch (_) {\n    //       // Swallow error\n    //     }\n    //   }\n    //   // Emit chainChanged event on chain change\n    //   if (\"chainId\" in state && state.chainId !== this.chainId) {\n    //     this.chainId = state.chainId || null;\n    //     this.emit(\"chainChanged\", this.chainId);\n    //     // indicate that we've connected, for EIP-1193 compliance\n    //     // we do this here so that iframe can initialize\n    //     if (!this._state.hasEmittedConnection) {\n    //       this._handleConnect(this.chainId);\n    //       this._state.hasEmittedConnection = true;\n    //     }\n    //   }\n    //   // Emit networkChanged event on network change\n    //   if (\"networkVersion\" in state && state.networkVersion !== this.networkVersion) {\n    //     this.networkVersion = state.networkVersion || null;\n    //     this.emit(\"networkChanged\", this.networkVersion);\n    //   }\n    // });\n\n    pump(mux.createStream(\"publicConfig\"), storeAsStream(this._publicConfigStore), // RPC requests should still work if only this stream fails\n    logStreamDisconnectWarning.bind(this, \"MetaMask PublicConfigStore\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    }); // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine; // json rpc notification listener\n\n    jsonRpcConnection.events.on(\"notification\", payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === \"wallet_accountsChanged\") {\n        this._handleAccountsChanged(params);\n      } else if (method === \"wallet_unlockStateChanged\") {\n        this._handleUnlockStateChanged(params);\n      } else if (method === \"wallet_chainChanged\") {\n        this._handleChainChanged(params);\n      } else if (EMITTED_NOTIFICATIONS.includes(payload.method)) {\n        // EIP 1193 subscriptions, per eth-json-rpc-filters/subscriptionManager\n        this.emit(\"data\", payload); // deprecated\n\n        this.emit(\"notification\", params.result);\n        this.emit(\"message\", {\n          type: method,\n          data: params\n        });\n      } // Backward compatibility for older non EIP 1193 subscriptions\n      // this.emit('data', null, payload)\n\n    });\n  }\n\n  get publicConfigStore() {\n    if (!this._sentWarnings.publicConfigStore) {\n      log.warn(messages.warnings.publicConfigStore);\n      this._sentWarnings.publicConfigStore = true;\n    }\n\n    return this._publicConfigStore;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param args - The RPC request arguments.\n   * @returns A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   *\n   * @param payload - The RPC request object.\n   * @param cb - The callback function.\n   */\n\n\n  sendAsync(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * We override the following event methods so that we can warn consumers\n   * about deprecated events:\n   *   addListener, on, once, prependListener, prependOnceListener\n   */\n\n\n  addListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.addListener(eventName, listener);\n  }\n\n  on(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.on(eventName, listener);\n  }\n\n  once(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.once(eventName, listener);\n  }\n\n  prependListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependListener(eventName, listener);\n  }\n\n  prependOnceListener(eventName, listener) {\n    this._warnOfDeprecation(eventName);\n\n    return super.prependOnceListener(eventName, listener);\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked,\n        networkVersion\n      } = await this.request({\n        method: \"wallet_getProviderState\"\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId,\n        networkVersion\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound.\n   *\n   * @param payload - The RPC request object.\n   * @param callback - The consumer's callback.\n   * @param isInternal - false - Whether the request is internal.\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"eth_accounts\" || _payload.method === \"eth_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"eth_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryPreopenHandle(_payload, cb);\n  }\n\n  send(methodOrPayload, callbackOrArgs) {\n    if (!this._sentWarnings.send) {\n      log.warn(messages.warnings.sendDeprecation);\n      this._sentWarnings.send = true;\n    }\n\n    if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n      return new Promise((resolve, reject) => {\n        try {\n          this._rpcRequest({\n            method: methodOrPayload,\n            params: callbackOrArgs\n          }, getRpcPromiseCallback(resolve, reject, false));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n\n    if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n      return this._rpcRequest(methodOrPayload, callbackOrArgs);\n    }\n\n    return this._sendSync(methodOrPayload);\n  }\n  /**\n   * DEPRECATED.\n   * Internal backwards compatibility method, used in send.\n   */\n\n\n  _sendSync(payload) {\n    let result;\n\n    switch (payload.method) {\n      case \"eth_accounts\":\n        result = this.selectedAddress ? [this.selectedAddress] : [];\n        break;\n\n      case \"eth_coinbase\":\n        result = this.selectedAddress || null;\n        break;\n\n      case \"eth_uninstallFilter\":\n        this._rpcRequest(payload, NOOP);\n\n        result = true;\n        break;\n\n      case \"net_version\":\n        result = this.networkVersion || null;\n        break;\n\n      default:\n        throw new Error(messages.errors.unsupportedSync(payload.method));\n    }\n\n    return {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      result\n    };\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits MetaMaskInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits MetaMaskInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits MetamaskInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"MetaMask: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"MetaMask: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before eth_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('MetaMask: \"eth_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits MetamaskInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId,\n      networkVersion\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId || !networkVersion) {\n      log.error(\"MetaMask: Received invalid network parameters. Please report this bug.\", {\n        chainId,\n        networkVersion\n      });\n      return;\n    }\n\n    if (networkVersion === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n  /**\n   * Warns of deprecation for the given event, if applicable.\n   */\n\n\n  _warnOfDeprecation(eventName) {\n    if (this._sentWarnings.events[eventName] === false) {\n      log.warn(messages.warnings.events[eventName]);\n      this._sentWarnings.events[eventName] = true;\n    }\n  }\n\n}\n\n_defineProperty(TorusInpageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\nconst defaults = options => ({\n  algorithms: options.algorithms || [\"sha256\"],\n  delimiter: options.delimiter || \" \",\n  full: options.full || false\n}); // Generate list of hashes\n\n\nconst hashes = (options, data) => {\n  const internalHashes = {};\n  options.algorithms.forEach(algorithm => {\n    internalHashes[algorithm] = createHash(algorithm).update(data, \"utf8\").digest(\"base64\");\n  });\n  return internalHashes;\n}; // Build an integrity string\n\n\nconst integrity = (options, sri) => {\n  let output = \"\"; // Hash list\n\n  output += Object.keys(sri.hashes).map(algorithm => \"\".concat(algorithm, \"-\").concat(sri.hashes[algorithm])).join(options.delimiter);\n  return output;\n};\n\nconst main = (options, data) => {\n  // Defaults\n  const finalOptions = defaults(options);\n  const sri = {\n    hashes: hashes(finalOptions, data),\n    integrity: undefined\n  };\n  sri.integrity = integrity(finalOptions, sri);\n  return finalOptions.full ? sri : sri.integrity;\n};\n\nclass PopupHandler extends EventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\n/**\n * Returns whether the given image URL exists\n * @param url - the url of the image\n * @returns - whether the image exists\n */\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  const {\n    document\n  } = window; // Use the site's favicon if it exists\n\n  let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  } // Search through available icons in no particular order\n\n\n  icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n  if (icon && (await imgExists(icon.href))) {\n    return icon.href;\n  }\n\n  return null;\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n/**\n * Sends site metadata over an RPC request.\n */\n\n\nasync function sendSiteMetadata(engine) {\n  try {\n    const domainMetadata = await getSiteMetadata(); // call engine.handle directly to avoid normal RPC request handling\n\n    engine.handle({\n      jsonrpc: \"2.0\",\n      id: getPreopenInstanceId(),\n      method: \"wallet_sendDomainMetadata\",\n      params: domainMetadata\n    }, NOOP);\n  } catch (error) {\n    log.error({\n      message: messages.errors.sendSiteMetadata(),\n      originalError: error\n    });\n  }\n}\n\nconst _excluded = [\"host\", \"chainId\", \"networkName\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst defaultVerifiers = {\n  [LOGIN_PROVIDER.GOOGLE]: true,\n  [LOGIN_PROVIDER.FACEBOOK]: true,\n  [LOGIN_PROVIDER.REDDIT]: true,\n  [LOGIN_PROVIDER.TWITCH]: true,\n  [LOGIN_PROVIDER.DISCORD]: true\n};\nconst iframeIntegrity = \"sha384-zFtyGD1XuBBFsoWsWz86WRRQIVjvJ09NSSfLCRwpEjER3OOdUm93Q9aVddcJz/Al\";\nconst expectedCacheControlHeader = \"max-age=3600\";\nconst UNSAFE_METHODS = [\"eth_sendTransaction\", \"eth_signTypedData\", \"eth_signTypedData_v3\", \"eth_signTypedData_v4\", \"personal_sign\", \"eth_getEncryptionPublicKey\", \"eth_decrypt\"];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\", {\n      check: false,\n      hash: iframeIntegrity,\n      version: \"\"\n    });\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/popup\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      modalZIndex = 99999,\n      apiKey = \"torus-default\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"buttonPosition\", BUTTON_POSITION.BOTTOM_LEFT);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    _defineProperty(this, \"isLoggedIn\", void 0);\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusWidgetVisibility\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"nodeDetailManager\", void 0);\n\n    _defineProperty(this, \"torusJs\", void 0);\n\n    _defineProperty(this, \"apiKey\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"isIframeFullScreen\", void 0);\n\n    _defineProperty(this, \"whiteLabel\", void 0);\n\n    _defineProperty(this, \"requestedVerifier\", void 0);\n\n    _defineProperty(this, \"currentVerifier\", void 0);\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"ethereum\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationMux\", void 0);\n\n    _defineProperty(this, \"isLoginCallback\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"paymentProviders\", configuration.paymentProviders);\n\n    _defineProperty(this, \"loginHint\", \"\");\n\n    _defineProperty(this, \"useWalletConnect\", void 0);\n\n    this.buttonPosition = buttonPosition;\n    this.torusUrl = \"\";\n    this.isLoggedIn = false; // ethereum.enable working\n\n    this.isInitialized = false; // init done\n\n    this.torusWidgetVisibility = true;\n    this.requestedVerifier = \"\";\n    this.currentVerifier = \"\";\n    this.nodeDetailManager = new NodeDetailManager();\n    this.torusJs = new TorusJs({\n      metadataHost: \"https://metadata.tor.us\",\n      allowHost: \"https://signer.tor.us/api/allow\"\n    });\n    this.apiKey = apiKey;\n    TorusJs.setAPIKey(apiKey);\n    setAPIKey(apiKey);\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.isIframeFullScreen = false;\n    this.dappStorageKey = \"\";\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      // deprecated: use loginConfig instead\n      enabledVerifiers = defaultVerifiers,\n      network = {\n        host: \"mainnet\",\n        chainId: null,\n        networkName: \"\",\n        blockExplorer: \"\",\n        ticker: \"\",\n        tickerName: \"\"\n      },\n      loginConfig = {},\n      showTorusButton = true,\n      integrity = {\n        check: false,\n        hash: iframeIntegrity,\n        version: \"\"\n      },\n      whiteLabel,\n      skipTKey = false,\n      useLocalStorage = false,\n      useWalletConnect = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv, integrity);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    this.whiteLabel = whiteLabel;\n    this.useWalletConnect = useWalletConnect;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    this.torusWidgetVisibility = showTorusButton;\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const localStorageKey = \"\".concat(configuration.localStorageKeyPrefix).concat(window.location.hostname);\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getPreopenInstanceId());\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"popup\";else torusIframeUrl.pathname += \"/popup\";\n\n    if (dappStorageKey) {\n      torusIframeUrl.hash = \"#dappStorageKey=\".concat(dappStorageKey);\n    } // Iframe code\n\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        allow=\".concat(useWalletConnect ? \"camera\" : \"\", \"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\").concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex, \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement('<div id=\"torusAlertContainer\"></div>');\n    this.torusAlertContainer.style.display = \"none\";\n    this.torusAlertContainer.style.setProperty(\"z-index\", this.alertZIndex.toString());\n    const link = window.document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    link.setAttribute(\"type\", \"text/css\");\n    link.setAttribute(\"href\", \"\".concat(torusUrl, \"/css/widget.css\"));\n    this.styleLink = link;\n    const {\n      defaultLanguage = getUserLanguage(),\n      customTranslations = {}\n    } = this.whiteLabel || {};\n    const mergedTranslations = deepmerge(configuration.translations, customTranslations);\n    const languageTranslations = mergedTranslations[defaultLanguage] || configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n\n    const handleSetup = async () => {\n      await documentReady();\n      return new Promise((resolve, reject) => {\n        this.torusIframe.onload = async () => {\n          // only do this if iframe is not full screen\n          this._setupWeb3();\n\n          const initStream = this.communicationMux.getStream(\"init_stream\");\n          initStream.on(\"data\", chunk => {\n            const {\n              name,\n              data,\n              error\n            } = chunk;\n\n            if (name === \"init_complete\" && data.success) {\n              // resolve promise\n              this.isInitialized = true;\n\n              this._displayIframe(this.isIframeFullScreen);\n\n              resolve(undefined);\n            } else if (error) {\n              reject(new Error(error));\n            }\n          });\n          initStream.write({\n            name: \"init_stream\",\n            data: {\n              enabledVerifiers,\n              loginConfig,\n              whiteLabel: this.whiteLabel,\n              buttonPosition: this.buttonPosition,\n              torusWidgetVisibility: this.torusWidgetVisibility,\n              apiKey: this.apiKey,\n              skipTKey,\n              network\n            }\n          });\n        };\n\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      });\n    };\n\n    if (buildEnv === \"production\" && integrity.check) {\n      // hacky solution to check for iframe integrity\n      const fetchUrl = \"\".concat(torusUrl, \"/popup\");\n      const resp = await fetch(fetchUrl, {\n        cache: \"reload\"\n      });\n\n      if (resp.headers.get(\"Cache-Control\") !== expectedCacheControlHeader) {\n        throw new Error(\"Unexpected Cache-Control headers, got \".concat(resp.headers.get(\"Cache-Control\")));\n      }\n\n      const response = await resp.text();\n      const calculatedIntegrity = main({\n        algorithms: [\"sha384\"]\n      }, response);\n      log.info(calculatedIntegrity, \"integrity\");\n\n      if (calculatedIntegrity === integrity.hash) {\n        await handleSetup();\n      } else {\n        this.clearInit();\n        throw new Error(\"Integrity check failed\");\n      }\n    } else {\n      await handleSetup();\n    }\n\n    return undefined;\n  }\n\n  login() {\n    let {\n      verifier = \"\",\n      login_hint: loginHint = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    this.requestedVerifier = verifier;\n    this.loginHint = loginHint;\n    return this.ethereum.enable();\n  }\n\n  logout() {\n    return new Promise((resolve, reject) => {\n      if (!this.isLoggedIn) {\n        reject(new Error(\"User has not logged in yet\"));\n        return;\n      }\n\n      const logOutStream = this.communicationMux.getStream(\"logout\");\n      logOutStream.write({\n        name: \"logOut\"\n      });\n      const statusStream = this.communicationMux.getStream(\"status\");\n\n      const statusStreamHandler = status => {\n        if (!status.loggedIn) {\n          this.isLoggedIn = false;\n          this.currentVerifier = \"\";\n          this.requestedVerifier = \"\";\n          resolve();\n        } else reject(new Error(\"Some Error Occured\"));\n      };\n\n      handleStream(statusStream, \"data\", statusStreamHandler);\n    });\n  }\n\n  async cleanUp() {\n    if (this.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof HTMLDocument;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.torusWidgetVisibility = false;\n\n    this._sendWidgetVisibilityStatus(false);\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this.torusWidgetVisibility = true;\n\n    this._sendWidgetVisibilityStatus(true);\n\n    this._displayIframe();\n  }\n\n  setProvider() {\n    let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let {\n      host = \"mainnet\",\n      chainId = null,\n      networkName = \"\"\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    return new Promise((resolve, reject) => {\n      const providerChangeStream = this.communicationMux.getStream(\"provider_change\");\n\n      const handler = chunk => {\n        const {\n          err,\n          success\n        } = chunk.data;\n        log.info(chunk);\n\n        if (err) {\n          reject(err);\n        } else if (success) {\n          resolve();\n        } else reject(new Error(\"some error occured\"));\n      };\n\n      handleStream(providerChangeStream, \"data\", handler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId, {\n        target: \"_blank\",\n        features: FEATURES_PROVIDER_CHANGE_WINDOW\n      });\n\n      providerChangeStream.write({\n        name: \"show_provider_change\",\n        data: {\n          network: _objectSpread({\n            host,\n            chainId,\n            networkName\n          }, rest),\n          preopenInstanceId,\n          override: false\n        }\n      });\n    });\n  }\n\n  showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const showWalletStream = this.communicationMux.getStream(\"show_wallet\");\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    showWalletStream.write({\n      name: \"show_wallet\",\n      data: {\n        path: finalPath\n      }\n    });\n\n    const showWalletHandler = chunk => {\n      if (chunk.name === \"show_wallet_instance\") {\n        // Let the error propogate up (hence, no try catch)\n        const {\n          instanceId\n        } = chunk.data;\n        const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n        finalUrl.searchParams.append(\"integrity\", \"true\");\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach(x => {\n          finalUrl.searchParams.append(x, params[x]);\n        });\n\n        if (this.dappStorageKey) {\n          finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n        }\n\n        const walletWindow = new PopupHandler({\n          url: finalUrl,\n          features: FEATURES_DEFAULT_WALLET_WINDOW\n        });\n        walletWindow.open();\n      }\n    };\n\n    handleStream(showWalletStream, \"data\", showWalletHandler);\n  }\n\n  async getPublicAddress(_ref2) {\n    let {\n      verifier,\n      verifierId,\n      isExtended = false\n    } = _ref2;\n    if (!configuration.supportedVerifierList.includes(verifier) || !WALLET_OPENLOGIN_VERIFIER_MAP[verifier]) throw new Error(\"Unsupported verifier\");\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({\n      verifier,\n      verifierId\n    });\n    const endpoints = nodeDetails.torusNodeEndpoints;\n    const torusNodePubs = nodeDetails.torusNodePub;\n    const walletVerifier = verifier;\n    const openloginVerifier = WALLET_OPENLOGIN_VERIFIER_MAP[verifier];\n\n    try {\n      const existingV1User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: walletVerifier,\n        verifierId\n      });\n\n      if (existingV1User.typeOfUser === \"v1\") {\n        if (!isExtended) return existingV1User.address;\n        return existingV1User;\n      } // we don't support v2 users with v1 verifiers so get or assign the key for v2 user on v2 `verifier`\n\n\n      const v2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n        verifier: openloginVerifier,\n        verifierId\n      }, true);\n      if (!isExtended) return v2User.address;\n      return v2User;\n    } catch (error) {\n      if (error !== null && error !== void 0 && error.message.includes(\"Verifier + VerifierID has not yet been assigned\")) {\n        // if user doesn't have key then assign it with v2 verifier\n        const newV2User = await this.torusJs.getUserTypeAndAddress(endpoints, torusNodePubs, {\n          verifier: openloginVerifier,\n          verifierId\n        }, true);\n        if (!isExtended) return newV2User.address;\n        return newV2User;\n      }\n\n      throw error;\n    }\n  }\n\n  getUserInfo(message) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const userInfoAccessStream = this.communicationMux.getStream(\"user_info_access\");\n        userInfoAccessStream.write({\n          name: \"user_info_access_request\"\n        });\n\n        const userInfoAccessHandler = chunk => {\n          const {\n            name,\n            data: {\n              approved,\n              payload,\n              rejected,\n              newRequest\n            }\n          } = chunk;\n\n          if (name === \"user_info_access_response\") {\n            if (approved) {\n              resolve(payload);\n            } else if (rejected) {\n              reject(new Error(\"User rejected the request\"));\n            } else if (newRequest) {\n              const userInfoStream = this.communicationMux.getStream(\"user_info\");\n\n              const userInfoHandler = handlerChunk => {\n                if (handlerChunk.name === \"user_info_response\") {\n                  if (handlerChunk.data.approved) {\n                    resolve(handlerChunk.data.payload);\n                  } else {\n                    reject(new Error(\"User rejected the request\"));\n                  }\n                }\n              };\n\n              handleStream(userInfoStream, \"data\", userInfoHandler);\n              const preopenInstanceId = getPreopenInstanceId();\n\n              this._handleWindow(preopenInstanceId, {\n                target: \"_blank\",\n                features: FEATURES_PROVIDER_CHANGE_WINDOW\n              });\n\n              userInfoStream.write({\n                name: \"user_info_request\",\n                data: {\n                  message,\n                  preopenInstanceId\n                }\n              });\n            }\n          }\n        };\n\n        handleStream(userInfoAccessStream, \"data\", userInfoAccessHandler);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  initiateTopup(provider, params) {\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        const {\n          errors,\n          isValid\n        } = validatePaymentProvider(provider, params);\n\n        if (!isValid) {\n          reject(new Error(JSON.stringify(errors)));\n          return;\n        }\n\n        const topupStream = this.communicationMux.getStream(\"topup\");\n\n        const topupHandler = chunk => {\n          if (chunk.name === \"topup_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(topupStream, \"data\", topupHandler);\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId);\n\n        topupStream.write({\n          name: \"topup_request\",\n          data: {\n            provider,\n            params,\n            preopenInstanceId\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async loginWithPrivateKey(loginParams) {\n    const {\n      privateKey,\n      userInfo\n    } = loginParams;\n    return new Promise((resolve, reject) => {\n      if (this.isInitialized) {\n        if (Buffer.from(privateKey, \"hex\").length !== 32) {\n          reject(new Error(\"Invalid private key, Please provide a 32 byte valid secp25k1 private key\"));\n          return;\n        }\n\n        const loginPrivKeyStream = this.communicationMux.getStream(\"login_with_private_key\");\n\n        const loginHandler = chunk => {\n          if (chunk.name === \"login_with_private_key_response\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n          }\n        };\n\n        handleStream(loginPrivKeyStream, \"data\", loginHandler);\n        loginPrivKeyStream.write({\n          name: \"login_with_private_key_request\",\n          data: {\n            privateKey,\n            userInfo\n          }\n        });\n      } else reject(new Error(\"Torus is not initialized yet\"));\n    });\n  }\n\n  async showWalletConnectScanner() {\n    if (!this.useWalletConnect) throw new Error(\"Set `useWalletConnect` as true in init function options to use wallet connect scanner\");\n    return new Promise((resolve, reject) => {\n      if (this.isLoggedIn) {\n        const walletConnectStream = this.communicationMux.getStream(\"wallet_connect_stream\");\n\n        const walletConnectHandler = chunk => {\n          if (chunk.name === \"wallet_connect_stream_res\") {\n            if (chunk.data.success) {\n              resolve(chunk.data.success);\n            } else {\n              reject(new Error(chunk.data.error));\n            }\n\n            this._displayIframe();\n          }\n        };\n\n        handleStream(walletConnectStream, \"data\", walletConnectHandler);\n        walletConnectStream.write({\n          name: \"wallet_connect_stream_req\"\n        });\n\n        this._displayIframe(true);\n      } else reject(new Error(\"User has not logged in yet\"));\n    });\n  }\n\n  _handleWindow(preopenInstanceId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (preopenInstanceId) {\n      const windowStream = this.communicationMux.getStream(\"window\");\n      const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?preopenInstanceId=\").concat(preopenInstanceId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      const handledWindow = new PopupHandler({\n        url: finalUrl,\n        target,\n        features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(preopenInstanceId, finalUrl.href);\n\n        return;\n      }\n\n      windowStream.write({\n        name: \"opened_window\",\n        data: {\n          preopenInstanceId\n        }\n      });\n\n      const closeHandler = _ref3 => {\n        let {\n          preopenInstanceId: receivedId,\n          close\n        } = _ref3;\n\n        if (receivedId === preopenInstanceId && close) {\n          handledWindow.close();\n          windowStream.removeListener(\"data\", closeHandler);\n        }\n      };\n\n      windowStream.on(\"data\", closeHandler);\n      handledWindow.once(\"close\", () => {\n        windowStream.write({\n          data: {\n            preopenInstanceId,\n            closed: true\n          }\n        });\n        windowStream.removeListener(\"data\", closeHandler);\n      });\n    }\n  }\n\n  _setEmbedWhiteLabel(element) {\n    // Set whitelabel\n    const {\n      theme\n    } = this.whiteLabel || {};\n\n    if (theme) {\n      const {\n        isDark = false,\n        colors = {}\n      } = theme;\n      if (isDark) element.classList.add(\"torus-dark\");\n      if (colors.torusBrand1) element.style.setProperty(\"--torus-brand-1\", colors.torusBrand1);\n      if (colors.torusGray2) element.style.setProperty(\"--torus-gray-2\", colors.torusGray2);\n    }\n  }\n\n  _getLogoUrl() {\n    var _this$whiteLabel, _this$whiteLabel$them;\n\n    let logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n\n    if ((_this$whiteLabel = this.whiteLabel) !== null && _this$whiteLabel !== void 0 && (_this$whiteLabel$them = _this$whiteLabel.theme) !== null && _this$whiteLabel$them !== void 0 && _this$whiteLabel$them.isDark) {\n      var _this$whiteLabel2;\n\n      logoUrl = ((_this$whiteLabel2 = this.whiteLabel) === null || _this$whiteLabel2 === void 0 ? void 0 : _this$whiteLabel2.logoLight) || logoUrl;\n    } else {\n      var _this$whiteLabel3;\n\n      logoUrl = ((_this$whiteLabel3 = this.whiteLabel) === null || _this$whiteLabel3 === void 0 ? void 0 : _this$whiteLabel3.logoDark) || logoUrl;\n    }\n\n    return logoUrl;\n  }\n\n  _sendWidgetVisibilityStatus(status) {\n    const torusWidgetVisibilityStream = this.communicationMux.getStream(\"torus-widget-visibility\");\n    torusWidgetVisibilityStream.write({\n      data: status\n    });\n  }\n\n  _displayIframe() {\n    let isFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this.isIframeFullScreen = isFull;\n  }\n\n  _setupWeb3() {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const metamaskStream = new BasePostMessageStream({\n      name: \"embed_metamask\",\n      target: \"iframe_metamask\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Due to compatibility reasons, we should not set up multiplexing on window.metamaskstream\n    // because the MetamaskInpageProvider also attempts to do so.\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_comm\",\n      target: \"iframe_comm\",\n      targetWindow: this.torusIframe.contentWindow,\n      targetOrigin: new URL(this.torusUrl).origin\n    }); // Backward compatibility with Gotchi :)\n    // window.metamaskStream = this.communicationStream\n    // compose the inpage provider\n\n    const inpageProvider = new TorusInpageProvider(metamaskStream); // detect eth_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inpageProvider[m];\n\n      inpageProvider[m] = function providerFunc(method) {\n        if (method && method === \"eth_requestAccounts\") {\n          return inpageProvider.enable();\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return originalMethod.apply(this, [method, ...args]);\n      };\n    };\n\n    detectAccountRequestPrototypeModifier(\"send\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n\n    inpageProvider.enable = () => {\n      return new Promise((resolve, reject) => {\n        // If user is already logged in, we assume they have given access to the website\n        inpageProvider.sendAsync({\n          jsonrpc: \"2.0\",\n          id: getPreopenInstanceId(),\n          method: \"eth_requestAccounts\",\n          params: []\n        }, (err, response) => {\n          const {\n            result: res\n          } = response || {};\n\n          if (err) {\n            setTimeout(() => {\n              reject(err);\n            }, 50);\n          } else if (Array.isArray(res) && res.length > 0) {\n            // If user is already rehydrated, resolve this\n            // else wait for something to be written to status stream\n            const handleLoginCb = () => {\n              if (this.requestedVerifier !== \"\" && this.currentVerifier !== this.requestedVerifier) {\n                const {\n                  requestedVerifier\n                } = this; // eslint-disable-next-line promise/no-promise-in-callback\n\n                this.logout() // eslint-disable-next-line promise/always-return\n                .then(_ => {\n                  this.requestedVerifier = requestedVerifier;\n\n                  this._showLoginPopup(true, resolve, reject);\n                }).catch(error => reject(error));\n              } else {\n                resolve(res);\n              }\n            };\n\n            if (this.isLoggedIn) {\n              handleLoginCb();\n            } else {\n              this.isLoginCallback = handleLoginCb;\n            }\n          } else {\n            // set up listener for login\n            this._showLoginPopup(true, resolve, reject);\n          }\n        });\n      });\n    };\n\n    inpageProvider.tryPreopenHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && UNSAFE_METHODS.includes(_payload.method)) {\n        const preopenInstanceId = getPreopenInstanceId();\n\n        this._handleWindow(preopenInstanceId, {\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        _payload.preopenInstanceId = preopenInstanceId;\n      }\n\n      inpageProvider._rpcEngine.handle(_payload, cb);\n    }; // Work around for web3@1.0 deleting the bound `sendAsync` but not the unbound\n    // `sendAsync` method on the prototype, causing `this` reference issues with drizzle\n\n\n    const proxiedInpageProvider = new Proxy(inpageProvider, {\n      // straight up lie that we deleted the property so that it doesnt\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.ethereum = proxiedInpageProvider;\n    const communicationMux = setupMultiplex(communicationStream);\n    this.communicationMux = communicationMux;\n    const windowStream = communicationMux.getStream(\"window\");\n    windowStream.on(\"data\", chunk => {\n      if (chunk.name === \"create_window\") {\n        // url is the url we need to open\n        // we can pass the final url upfront so that it removes the step of redirecting to /redirect and waiting for finalUrl\n        this._createPopupBlockAlert(chunk.data.preopenInstanceId, chunk.data.url);\n      }\n    }); // show torus widget if button clicked\n\n    const widgetStream = communicationMux.getStream(\"widget\");\n    widgetStream.on(\"data\", chunk => {\n      const {\n        data\n      } = chunk;\n\n      this._displayIframe(data);\n    }); // Show torus button if wallet has been hydrated/detected\n\n    const statusStream = communicationMux.getStream(\"status\");\n    statusStream.on(\"data\", status => {\n      // login\n      if (status.loggedIn) {\n        this.isLoggedIn = status.loggedIn;\n        this.currentVerifier = status.verifier;\n      } // logout\n      else this._displayIframe();\n\n      if (this.isLoginCallback) {\n        this.isLoginCallback();\n        delete this.isLoginCallback;\n      }\n    });\n    this.provider = proxiedInpageProvider;\n    if (this.provider.shouldSendMetadata) sendSiteMetadata(this.provider._rpcEngine);\n\n    inpageProvider._initializeState();\n\n    log.debug(\"Torus - injected provider\");\n  }\n\n  _showLoginPopup(calledFromEmbed, resolve, reject) {\n    const loginHandler = data => {\n      const {\n        err,\n        selectedAddress\n      } = data;\n\n      if (err) {\n        log.error(err);\n        if (reject) reject(err);\n      } // returns an array (cause accounts expects it)\n      else if (resolve) resolve([selectedAddress]);\n\n      if (this.isIframeFullScreen) this._displayIframe();\n    };\n\n    const oauthStream = this.communicationMux.getStream(\"oauth\");\n\n    if (!this.requestedVerifier) {\n      this._displayIframe(true);\n\n      handleStream(oauthStream, \"data\", loginHandler);\n      oauthStream.write({\n        name: \"oauth_modal\",\n        data: {\n          calledFromEmbed\n        }\n      });\n    } else {\n      handleStream(oauthStream, \"data\", loginHandler);\n      const preopenInstanceId = getPreopenInstanceId();\n\n      this._handleWindow(preopenInstanceId);\n\n      oauthStream.write({\n        name: \"oauth\",\n        data: {\n          calledFromEmbed,\n          verifier: this.requestedVerifier,\n          preopenInstanceId,\n          login_hint: this.loginHint\n        }\n      });\n    }\n  }\n\n  _createPopupBlockAlert(preopenInstanceId, url) {\n    const logoUrl = this._getLogoUrl();\n\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(preopenInstanceId, {\n          url,\n          target: \"_blank\",\n          features: FEATURES_CONFIRM_WINDOW\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    this._setEmbedWhiteLabel(torusAlert);\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.style.display = \"block\";\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    runOnLoad(attachOnLoad);\n    runOnLoad(bindOnLoad);\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInpageProvider, WALLET_OPENLOGIN_VERIFIER_MAP, Torus as default };\n//# sourceMappingURL=torus.esm.js.map\n"]},"metadata":{},"sourceType":"module"}