{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"../constants\");\n\nvar encoding_1 = require(\"./encoding\");\n\nfunction isCompressed(publicKey) {\n  return publicKey.length === constants_1.KEY_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n}\n\nexports.isCompressed = isCompressed;\n\nfunction isDecompressed(publicKey) {\n  return publicKey.length === constants_1.DECOMPRESSED_LENGTH || publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isDecompressed = isDecompressed;\n\nfunction isPrefixed(publicKey) {\n  if (isCompressed(publicKey)) {\n    return publicKey.length === constants_1.PREFIXED_KEY_LENGTH;\n  }\n\n  return publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH;\n}\n\nexports.isPrefixed = isPrefixed;\n\nfunction sanitizePublicKey(publicKey) {\n  return isPrefixed(publicKey) ? publicKey : Buffer.from(\"04\".concat(publicKey.toString('hex')), 'hex');\n}\n\nexports.sanitizePublicKey = sanitizePublicKey;\n\nfunction exportRecoveryParam(recoveryParam) {\n  return encoding_1.hexToBuffer(encoding_1.sanitizeHex((recoveryParam + 27).toString(16)));\n}\n\nexports.exportRecoveryParam = exportRecoveryParam;\n\nfunction importRecoveryParam(v) {\n  return encoding_1.hexToNumber(encoding_1.removeHexLeadingZeros(encoding_1.bufferToHex(v))) - 27;\n}\n\nexports.importRecoveryParam = importRecoveryParam;\n\nfunction splitSignature(sig) {\n  return {\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64),\n    v: sig.slice(64, 65)\n  };\n}\n\nexports.splitSignature = splitSignature;\n\nfunction joinSignature(sig) {\n  return encoding_1.concatBuffers(sig.r, sig.s, sig.v);\n}\n\nexports.joinSignature = joinSignature;\n\nfunction isValidDERSignature(sig) {\n  return encoding_1.bufferToHex(sig).startsWith('30') && sig.length > 65;\n}\n\nexports.isValidDERSignature = isValidDERSignature;\n\nfunction sanitizeRSVSignature(sig) {\n  return {\n    signature: sig.slice(0, 64),\n    recovery: importRecoveryParam(sig.slice(64, 65))\n  };\n}\n\nexports.sanitizeRSVSignature = sanitizeRSVSignature;","map":null,"metadata":{},"sourceType":"script"}