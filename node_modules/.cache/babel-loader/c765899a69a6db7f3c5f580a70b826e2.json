{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _classCallCheck = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/madhav/Documents/freelancers/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\n\nvar ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\n\nvar CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\n\nvar WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\n\nvar WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\n\nvar WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\n\nvar util_1 = require(\"./util\");\n\nvar LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nvar SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\n\nvar CoinbaseWalletSDK = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  function CoinbaseWalletSDK(options) {\n    _classCallCheck(this, CoinbaseWalletSDK);\n\n    var _a;\n\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    var linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n    var uiConstructor;\n\n    if (!options.uiConstructor) {\n      uiConstructor = function uiConstructor(opts) {\n        return new WalletSDKUI_1.WalletSDKUI(opts);\n      };\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._eventListener = options.eventListener;\n    var u = new URL(linkAPIUrl);\n    var origin = \"\".concat(u.protocol, \"//\").concat(u.host);\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(\"-walletlink:\".concat(origin)); // needs migration to preserve local states\n\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n\n    if (this.walletExtension) {\n      return;\n    }\n\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl: linkAPIUrl,\n      version: SDK_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor: uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      eventListener: this._eventListener\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n\n\n  _createClass(CoinbaseWalletSDK, [{\n    key: \"makeWeb3Provider\",\n    value: function makeWeb3Provider() {\n      var jsonRpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var extension = this.walletExtension;\n\n      if (extension) {\n        if (!this.isCipherProvider(extension)) {\n          extension.setProviderInfo(jsonRpcUrl, chainId);\n        }\n\n        return extension;\n      }\n\n      var relay = this._relay;\n\n      if (!relay || !this._relayEventManager || !this._storage) {\n        throw new Error(\"Relay not initialized, should never happen\");\n      }\n\n      if (!jsonRpcUrl) relay.setConnectDisabled(true);\n      return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n        relayProvider: function relayProvider() {\n          return Promise.resolve(relay);\n        },\n        relayEventManager: this._relayEventManager,\n        storage: this._storage,\n        jsonRpcUrl: jsonRpcUrl,\n        chainId: chainId,\n        qrUrl: this.getQrUrl(),\n        eventListener: this._eventListener,\n        overrideIsMetaMask: this._overrideIsMetaMask,\n        overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet\n      });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n\n  }, {\n    key: \"setAppInfo\",\n    value: function setAppInfo(appName, appLogoUrl) {\n      var _a;\n\n      this._appName = appName || \"DApp\";\n      this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n      var extension = this.walletExtension;\n\n      if (extension) {\n        if (!this.isCipherProvider(extension)) {\n          extension.setAppInfo(this._appName, this._appLogoUrl);\n        }\n      } else {\n        (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _a;\n\n      var extension = this.walletExtension;\n\n      if (extension) {\n        extension.close();\n      } else {\n        (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n      }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n\n  }, {\n    key: \"getQrUrl\",\n    value: function getQrUrl() {\n      var _a, _b;\n\n      return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n  }, {\n    key: \"isCipherProvider\",\n    value: function isCipherProvider(provider) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n  }, {\n    key: \"walletExtension\",\n    get: function get() {\n      var _a;\n\n      return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n  }]);\n\n  return CoinbaseWalletSDK;\n}();\n\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;","map":null,"metadata":{},"sourceType":"script"}